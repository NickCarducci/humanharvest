import React from "react";
import { linecss, shortNumber } from "./vaxx";

/*const mortalagenj = {
  "1960-1969": [
    {
      age: "0",
      dx: 2260
    },
    {
      age: "1-4",
      dx: 321
    },
    {
      age: "5-9",
      dx: 198
    },
    {
      age: "10-14",
      dx: 172
    },
    {
      age: "15-19",
      dx: 376
    },
    {
      age: "20-24",
      dx: 518
    },
    {
      age: "25-29",
      dx: 555
    },
    {
      age: "30-34",
      dx: 693
    },
    {
      age: "35-39",
      dx: 1037
    },
    {
      age: "40-44",
      dx: 1609
    },
    {
      age: "45-49",
      dx: 2571
    },
    {
      age: "50-54",
      dx: 4056
    },
    {
      age: "55-59",
      dx: 5868
    },
    {
      age: "60-64",
      dx: 8259
    },
    {
      age: "65-69",
      dx: 10924
    },
    {
      age: "70-74",
      dx: 13510
    },
    {
      age: "75-79",
      dx: 14832
    },
    {
      age: "80-84",
      dx: 14149
    },
    {
      age: "85-89",
      dx: 10651
    },
    {
      age: "90-94",
      dx: 5435
    },
    {
      age: "95-99",
      dx: 1692
    },
    {
      age: "100-104",
      dx: 289
    },
    {
      age: "105-109",
      dx: 25
    },
    {
      age: "110",
      dx: 1
    }
  ],
  "1970-1979": [
    {
      age: "0",
      dx: 1581
    },
    {
      age: "1-4",
      dx: 255
    },
    {
      age: "5-9",
      dx: 163
    },
    {
      age: "10-14",
      dx: 150
    },
    {
      age: "15-19",
      dx: 404
    },
    {
      age: "20-24",
      dx: 591
    },
    {
      age: "25-29",
      dx: 549
    },
    {
      age: "30-34",
      dx: 644
    },
    {
      age: "35-39",
      dx: 901
    },
    {
      age: "40-44",
      dx: 1413
    },
    {
      age: "45-49",
      dx: 2265
    },
    {
      age: "50-54",
      dx: 3409
    },
    {
      age: "55-59",
      dx: 5056
    },
    {
      age: "60-64",
      dx: 7279
    },
    {
      age: "65-69",
      dx: 9754
    },
    {
      age: "70-74",
      dx: 12478
    },
    {
      age: "75-79",
      dx: 14802
    },
    {
      age: "80-84",
      dx: 15102
    },
    {
      age: "85-89",
      dx: 12459
    },
    {
      age: "90-94",
      dx: 7346
    },
    {
      age: "95-99",
      dx: 2760
    },
    {
      age: "100-104",
      dx: 574
    },
    {
      age: "105-109",
      dx: 61
    },
    {
      age: "110",
      dx: 3
    }
  ],
  "1980-1989": [
    {
      age: "0",
      dx: 1074
    },
    {
      age: "1-4",
      dx: 196
    },
    {
      age: "5-9",
      dx: 123
    },
    {
      age: "10-14",
      dx: 119
    },
    {
      age: "15-19",
      dx: 326
    },
    {
      age: "20-24",
      dx: 470
    },
    {
      age: "25-29",
      dx: 577
    },
    {
      age: "30-34",
      dx: 740
    },
    {
      age: "35-39",
      dx: 898
    },
    {
      age: "40-44",
      dx: 1180
    },
    {
      age: "45-49",
      dx: 1847
    },
    {
      age: "50-54",
      dx: 2893
    },
    {
      age: "55-59",
      dx: 4406
    },
    {
      age: "60-64",
      dx: 6471
    },
    {
      age: "65-69",
      dx: 8849
    },
    {
      age: "70-74",
      dx: 11846
    },
    {
      age: "75-79",
      dx: 13961
    },
    {
      age: "80-84",
      dx: 15834
    },
    {
      age: "85-89",
      dx: 14161
    },
    {
      age: "90-94",
      dx: 9304
    },
    {
      age: "95-99",
      dx: 3784
    },
    {
      age: "100-104",
      dx: 843
    },
    {
      age: "105-109",
      dx: 92
    },
    {
      age: "110",
      dx: 5
    }
  ],
  "1990-1999": [
    {
      age: "0",
      dx: 810
    },
    {
      age: "1-4",
      dx: 142
    },
    {
      age: "5-9",
      dx: 85
    },
    {
      age: "10-14",
      dx: 91
    },
    {
      age: "15-19",
      dx: 270
    },
    {
      age: "20-24",
      dx: 410
    },
    {
      age: "25-29",
      dx: 509
    },
    {
      age: "30-34",
      dx: 732
    },
    {
      age: "35-39",
      dx: 1004
    },
    {
      age: "40-44",
      dx: 1296
    },
    {
      age: "45-49",
      dx: 1684
    },
    {
      age: "50-54",
      dx: 2406
    },
    {
      age: "55-59",
      dx: 3659
    },
    {
      age: "60-64",
      dx: 5479
    },
    {
      age: "65-69",
      dx: 7896
    },
    {
      age: "70-74",
      dx: 10672
    },
    {
      age: "75-79",
      dx: 13367
    },
    {
      age: "80-84",
      dx: 16097
    },
    {
      age: "85-89",
      dx: 15615
    },
    {
      age: "90-94",
      dx: 11382
    },
    {
      age: "95-99",
      dx: 5057
    },
    {
      age: "100-104",
      dx: 1198
    },
    {
      age: "105-109",
      dx: 132
    },
    {
      age: "110",
      dx: 7
    }
  ],
  "2000-2009": [
    {
      age: "0",
      dx: 584
    },
    {
      age: "1-4",
      dx: 82
    },
    {
      age: "5-9",
      dx: 50
    },
    {
      age: "10-14",
      dx: 67
    },
    {
      age: "15-19",
      dx: 230
    },
    {
      age: "20-24",
      dx: 434
    },
    {
      age: "25-29",
      dx: 436
    },
    {
      age: "30-34",
      dx: 485
    },
    {
      age: "35-39",
      dx: 651
    },
    {
      age: "40-44",
      dx: 983
    },
    {
      age: "45-49",
      dx: 1453
    },
    {
      age: "50-54",
      dx: 2112
    },
    {
      age: "55-59",
      dx: 3017
    },
    {
      age: "60-64",
      dx: 4456
    },
    {
      age: "65-69",
      dx: 6472
    },
    {
      age: "70-74",
      dx: 9317
    },
    {
      age: "75-79",
      dx: 12825
    },
    {
      age: "80-84",
      dx: 16653
    },
    {
      age: "85-89",
      dx: 18103
    },
    {
      age: "90-94",
      dx: 13818
    },
    {
      age: "95-99",
      dx: 6249
    },
    {
      age: "100-104",
      dx: 1388
    },
    {
      age: "105-109",
      dx: 132
    },
    {
      age: "110",
      dx: 5
    }
  ],
  "2010-2018": [
    {
      age: "0",
      dx: 446
    },
    {
      age: "1-4",
      dx: 72
    },
    {
      age: "5-9",
      dx: 46
    },
    {
      age: "10-14",
      dx: 53
    },
    {
      age: "15-19",
      dx: 170
    },
    {
      age: "20-24",
      dx: 426
    },
    {
      age: "25-29",
      dx: 523
    },
    {
      age: "30-34",
      dx: 561
    },
    {
      age: "35-39",
      dx: 627
    },
    {
      age: "40-44",
      dx: 810
    },
    {
      age: "45-49",
      dx: 1245
    },
    {
      age: "50-54",
      dx: 1896
    },
    {
      age: "55-59",
      dx: 2752
    },
    {
      age: "60-64",
      dx: 3891
    },
    {
      age: "65-69",
      dx: 5482
    },
    {
      age: "70-74",
      dx: 7953
    },
    {
      age: "75-79",
      dx: 11284
    },
    {
      age: "80-84",
      dx: 15415
    },
    {
      age: "85-89",
      dx: 18582
    },
    {
      age: "90-94",
      dx: 16492
    },
    {
      age: "95-99",
      dx: 8723
    },
    {
      age: "100-104",
      dx: 2288
    },
    {
      age: "105-109",
      dx: 252
    },
    {
      age: "110",
      dx: 11
    }
  ]
};*/

const usmortality = {
  "1965": [
    {
      age: "0",
      dx: 2519,
      pop: 3947
    },
    {
      age: "1-4",
      dx: 394,
      pop: 16218
    },
    {
      age: "5-9",
      dx: 221,
      pop: 20236
    },
    {
      age: "10-14",
      dx: 205,
      pop: 18547
    },
    {
      age: "15-19",
      dx: 440,
      pop: 16155
    },
    {
      age: "20-24",
      dx: 593,
      pop: 12941
    },
    {
      age: "25-29",
      dx: 621,
      pop: 11051
    },
    {
      age: "30-34",
      dx: 769,
      pop: 11144
    },
    {
      age: "35-39",
      dx: 1110,
      pop: 12133
    },
    {
      age: "40-44",
      dx: 1687,
      pop: 12330
    },
    {
      age: "45-49",
      dx: 2625,
      pop: 11232
    },
    {
      age: "50-54",
      dx: 4027,
      pop: 10324
    },
    {
      age: "55-59",
      dx: 5670,
      pop: 9324
    },
    {
      age: "60-64",
      dx: 7826,
      pop: 7433
    },
    {
      age: "65-69",
      dx: 10338,
      pop: 6492
    },
    {
      age: "70-74",
      dx: 12787,
      pop: 5267
    },
    {
      age: "75-79",
      dx: 14321,
      pop: 3429
    },
    {
      age: "80-84",
      dx: 14658,
      pop: 1899
    },
    {
      age: "85-89",
      dx: 11292,
      pop: 300
    }, //1040
    {
      age: "90-94",
      dx: 5758,
      pop: 250
    },
    {
      age: "95-99",
      dx: 1808,
      pop: 200
    },
    {
      age: "100-104",
      dx: 304,
      pop: 150
    },
    {
      age: "105-109",
      dx: 25,
      pop: 75
    },
    {
      age: "110",
      dx: 1,
      pop: 25
    }
  ],
  "1970": [
    {
      age: "0",
      dx: 2250,
      pop: 3413
    },
    {
      age: "1-4",
      dx: 360,
      pop: 13963
    },
    {
      age: "5-9",
      dx: 213,
      pop: 20243
    },
    {
      age: "10-14",
      dx: 200,
      pop: 20641
    },
    {
      age: "15-19",
      dx: 513,
      pop: 18622
    },
    {
      age: "20-24",
      dx: 651,
      pop: 15767
    },
    {
      age: "25-29",
      dx: 666,
      pop: 13119
    },
    {
      age: "30-34",
      dx: 811,
      pop: 11287
    },
    {
      age: "35-39",
      dx: 1149,
      pop: 11155
    },
    {
      age: "40-44",
      dx: 1748,
      pop: 12088
    },
    {
      age: "45-49",
      dx: 2629,
      pop: 12053
    },
    {
      age: "50-54",
      dx: 3970,
      pop: 10966
    },
    {
      age: "55-59",
      dx: 5658,
      pop: 9922
    },
    {
      age: "60-64",
      dx: 7736,
      pop: 8467
    },
    {
      age: "65-69",
      dx: 10139,
      pop: 6880
    },
    {
      age: "70-74",
      dx: 12599,
      pop: 5421
    },
    {
      age: "75-79",
      dx: 14368,
      pop: 3844
    },
    {
      age: "80-84",
      dx: 14424,
      pop: 2228
    },
    {
      age: "85-89",
      dx: 11441,
      pop: 400
    }, //1307
    {
      age: "90-94",
      dx: 6108,
      pop: 325
    },
    {
      age: "95-99",
      dx: 1984,
      pop: 275
    },
    {
      age: "100-104",
      dx: 351,
      pop: 200
    },
    {
      age: "105-109",
      dx: 31,
      pop: 75
    },
    {
      age: "110",
      dx: 1,
      pop: 25
    }
  ],
  "1975": [
    {
      age: "0",
      dx: 1848,
      pop: 3065
    },
    {
      age: "1-4",
      dx: 314,
      pop: 13421
    },
    {
      age: "5-9",
      dx: 200,
      pop: 17805
    },
    {
      age: "10-14",
      dx: 195,
      pop: 20911
    },
    {
      age: "15-19",
      dx: 534,
      pop: 20978
    },
    {
      age: "20-24",
      dx: 694,
      pop: 18758
    },
    {
      age: "25-29",
      dx: 674,
      pop: 16428
    },
    {
      age: "30-34",
      dx: 790,
      pop: 13644
    },
    {
      age: "35-39",
      dx: 1111,
      pop: 11400
    },
    {
      age: "40-44",
      dx: 1674,
      pop: 11355
    },
    {
      age: "45-49",
      dx: 2569,
      pop: 11842
    },
    {
      age: "50-54",
      dx: 3728,
      pop: 11958
    },
    {
      age: "55-59",
      dx: 5388,
      pop: 10386
    },
    {
      age: "60-64",
      dx: 7496,
      pop: 9327
    },
    {
      age: "65-69",
      dx: 9675,
      pop: 7864
    },
    {
      age: "70-74",
      dx: 12202,
      pop: 5710
    },
    {
      age: "75-79",
      dx: 14259,
      pop: 4126
    },
    {
      age: "80-84",
      dx: 14539,
      pop: 2655
    },
    {
      age: "85-89",
      dx: 12081,
      pop: 500
    }, //1706
    {
      age: "90-94",
      dx: 6983,
      pop: 425
    },
    {
      age: "95-99",
      dx: 2496,
      pop: 350
    },
    {
      age: "100-104",
      dx: 496,
      pop: 275
    },
    {
      age: "105-109",
      dx: 50,
      pop: 125
    },
    {
      age: "110",
      dx: 2,
      pop: 25
    }
  ],
  "1980": [
    {
      age: "0",
      dx: 1465,
      pop: 3426
    },
    {
      age: "1-4",
      dx: 265,
      pop: 12637
    },
    {
      age: "5-9",
      dx: 164,
      pop: 16947
    },
    {
      age: "10-14",
      dx: 165,
      pop: 18445
    },
    {
      age: "15-19",
      dx: 482,
      pop: 21348
    },
    {
      age: "20-24",
      dx: 640,
      pop: 21096
    },
    {
      age: "25-29",
      dx: 623,
      pop: 19077
    },
    {
      age: "30-34",
      dx: 674,
      pop: 16961
    },
    {
      age: "35-39",
      dx: 930,
      pop: 13592
    },
    {
      age: "40-44",
      dx: 1428,
      pop: 11522
    },
    {
      age: "45-49",
      dx: 2224,
      pop: 11212
    },
    {
      age: "50-54",
      dx: 3368,
      pop: 11724
    },
    {
      age: "55-59",
      dx: 4859,
      pop: 11582
    },
    {
      age: "60-64",
      dx: 6885,
      pop: 9866
    },
    {
      age: "65-69",
      dx: 9064,
      pop: 8745
    },
    {
      age: "70-74",
      dx: 11478,
      pop: 6593
    },
    {
      age: "75-79",
      dx: 13740,
      pop: 4724
    },
    {
      age: "80-84",
      dx: 15019,
      pop: 2875
    },
    {
      age: "85-89",
      dx: 13342,
      pop: 600
    }, //2197
    {
      age: "90-94",
      dx: 8672,
      pop: 500
    },
    {
      age: "95-99",
      dx: 3572,
      pop: 400
    },
    {
      age: "100-104",
      dx: 835,
      pop: 300
    },
    {
      age: "105-109",
      dx: 99,
      pop: 200
    },
    {
      age: "110",
      dx: 6,
      pop: 100
    }
  ],
  "1985": [
    {
      age: "0",
      dx: 1161,
      pop: 3572
    },
    {
      age: "1-4",
      dx: 228,
      pop: 14123
    },
    {
      age: "5-9",
      dx: 137,
      pop: 16338
    },
    {
      age: "10-14",
      dx: 142,
      pop: 17450
    },
    {
      age: "15-19",
      dx: 423,
      pop: 18931
    },
    {
      age: "20-24",
      dx: 575,
      pop: 21529
    },
    {
      age: "25-29",
      dx: 588,
      pop: 21459
    },
    {
      age: "30-34",
      dx: 646,
      pop: 19503
    },
    {
      age: "35-39",
      dx: 831,
      pop: 16867
    },
    {
      age: "40-44",
      dx: 1244,
      pop: 13636
    },
    {
      age: "45-49",
      dx: 1973,
      pop: 11429
    },
    {
      age: "50-54",
      dx: 3073,
      pop: 10957
    },
    {
      age: "55-59",
      dx: 4583,
      pop: 11352
    },
    {
      age: "60-64",
      dx: 6522,
      pop: 10803
    },
    {
      age: "65-69",
      dx: 8803,
      pop: 9214
    },
    {
      age: "70-74",
      dx: 11415,
      pop: 7412
    },
    {
      age: "75-79",
      dx: 13604,
      pop: 5374
    },
    {
      age: "80-84",
      dx: 15344,
      pop: 3282
    },
    {
      age: "85-89",
      dx: 13995,
      pop: 700
    }, //2595
    {
      age: "90-94",
      dx: 9466,
      pop: 600
    },
    {
      age: "95-99",
      dx: 4107,
      pop: 525
    },
    {
      age: "100-104",
      dx: 1006,
      pop: 350
    },
    {
      age: "105-109",
      dx: 125,
      pop: 275
    },
    {
      age: "110",
      dx: 8,
      pop: 150
    }
  ],
  "1990": [
    {
      age: "0",
      dx: 1040,
      pop: 3858
    },
    {
      age: "1-4",
      dx: 204,
      pop: 14650
    },
    {
      age: "5-9",
      dx: 121,
      pop: 17917
    },
    {
      age: "10-14",
      dx: 136,
      pop: 16797
    },
    {
      age: "15-19",
      dx: 413,
      pop: 18133
    },
    {
      age: "20-24",
      dx: 542,
      pop: 19258
    },
    {
      age: "25-29",
      dx: 589,
      pop: 21560
    },
    {
      age: "30-34",
      dx: 715,
      pop: 21676
    },
    {
      age: "35-39",
      dx: 893,
      pop: 19455
    },
    {
      age: "40-44",
      dx: 1202,
      pop: 16960
    },
    {
      age: "45-49",
      dx: 1818,
      pop: 13421
    },
    {
      age: "50-54",
      dx: 2854,
      pop: 11212
    },
    {
      age: "55-59",
      dx: 4314,
      pop: 10534
    },
    {
      age: "60-64",
      dx: 6299,
      pop: 10707
    },
    {
      age: "65-69",
      dx: 8492,
      pop: 9962
    },
    {
      age: "70-74",
      dx: 11236,
      pop: 7902
    },
    {
      age: "75-79",
      dx: 13561,
      pop: 6027
    },
    {
      age: "80-84",
      dx: 15480,
      pop: 3823
    },
    {
      age: "85-89",
      dx: 14506,
      pop: 750
    }, //2968
    {
      age: "90-94",
      dx: 10052,
      pop: 650
    },
    {
      age: "95-99",
      dx: 4369,
      pop: 550
    },
    {
      age: "100-104",
      dx: 1038,
      pop: 450
    },
    {
      age: "105-109",
      dx: 120,
      pop: 350
    },
    {
      age: "110",
      dx: 7,
      pop: 250
    }
  ],
  "1995": [
    {
      age: "0",
      dx: 890,
      pop: 3870
    },
    {
      age: "1-4",
      dx: 178,
      pop: 15774
    },
    {
      age: "5-9",
      dx: 104,
      pop: 18859
    },
    {
      age: "10-14",
      dx: 126,
      pop: 18753
    },
    {
      age: "15-19",
      dx: 423,
      pop: 17616
    },
    {
      age: "20-24",
      dx: 530,
      pop: 18326
    },
    {
      age: "25-29",
      dx: 587,
      pop: 19176
    },
    {
      age: "30-34",
      dx: 751,
      pop: 22177
    },
    {
      age: "35-39",
      dx: 966,
      pop: 21961
    },
    {
      age: "40-44",
      dx: 1247,
      pop: 19699
    },
    {
      age: "45-49",
      dx: 1751,
      pop: 16679
    },
    {
      age: "50-54",
      dx: 2615,
      pop: 13191
    },
    {
      age: "55-59",
      dx: 3984,
      pop: 10936
    },
    {
      age: "60-64",
      dx: 5869,
      pop: 10082
    },
    {
      age: "65-69",
      dx: 8089,
      pop: 9970
    },
    {
      age: "70-74",
      dx: 10658,
      pop: 8741
    },
    {
      age: "75-79",
      dx: 13158,
      pop: 6574
    },
    {
      age: "80-84",
      dx: 15630,
      pop: 4351
    },
    {
      age: "85-89",
      dx: 15052,
      pop: 900
    }, //3522
    {
      age: "90-94",
      dx: 10972,
      pop: 800
    },
    {
      age: "95-99",
      dx: 5010,
      pop: 600
    },
    {
      age: "100-104",
      dx: 1251,
      pop: 500
    },
    {
      age: "105-109",
      dx: 151,
      pop: 400
    },
    {
      age: "110",
      dx: 9,
      pop: 300
    }
  ],
  "2000": [
    {
      age: "0",
      dx: 751,
      pop: 3797
    },
    {
      age: "1-4",
      dx: 146,
      pop: 15353
    },
    {
      age: "5-9",
      dx: 90,
      pop: 19738
    },
    {
      age: "10-14",
      dx: 112,
      pop: 19040
    },
    {
      age: "15-19",
      dx: 367,
      pop: 19068
    },
    {
      age: "20-24",
      dx: 475,
      pop: 17512
    },
    {
      age: "25-29",
      dx: 487,
      pop: 18869
    },
    {
      age: "30-34",
      dx: 630,
      pop: 20741
    },
    {
      age: "35-39",
      dx: 854,
      pop: 22625
    },
    {
      age: "40-44",
      dx: 1195,
      pop: 21373
    },
    {
      age: "45-49",
      dx: 1672,
      pop: 18470
    },
    {
      age: "50-54",
      dx: 2431,
      pop: 15163
    },
    {
      age: "55-59",
      dx: 3698,
      pop: 11757
    },
    {
      age: "60-64",
      dx: 5555,
      pop: 10056
    },
    {
      age: "65-69",
      dx: 7739,
      pop: 9762
    },
    {
      age: "70-74",
      dx: 10509,
      pop: 8736
    },
    {
      age: "75-79",
      dx: 13217,
      pop: 7063
    },
    {
      age: "80-84",
      dx: 16221,
      pop: 4642
    },
    {
      age: "85-89",
      dx: 15971,
      pop: 900
    }, //3871
    {
      age: "90-94",
      dx: 11539,
      pop: 800
    },
    {
      age: "95-99",
      dx: 5060,
      pop: 700
    },
    {
      age: "100-104",
      dx: 1153,
      pop: 600
    },
    {
      age: "105-109",
      dx: 121,
      pop: 500
    },
    {
      age: "110",
      dx: 6,
      pop: 400
    }
  ],
  "2005": [
    {
      age: "0",
      dx: 703,
      pop: 4000
    },
    {
      age: "1-4",
      dx: 126,
      pop: 15940
    },
    {
      age: "5-9",
      dx: 75,
      pop: 19636
    },
    {
      age: "10-14",
      dx: 96,
      pop: 21176
    },
    {
      age: "15-19",
      dx: 327,
      pop: 20313
    },
    {
      age: "20-24",
      dx: 468,
      pop: 20313
    },
    {
      age: "25-29",
      dx: 469,
      pop: 20339
    },
    {
      age: "30-34",
      dx: 546,
      pop: 19008
    },
    {
      age: "35-39",
      dx: 773,
      pop: 21786
    },
    {
      age: "40-44",
      dx: 1152,
      pop: 21787
    },
    {
      age: "45-49",
      dx: 1689,
      pop: 20534
    },
    {
      age: "50-54",
      dx: 2375,
      pop: 20534
    },
    {
      age: "55-59",
      dx: 3447,
      pop: 14187
    },
    {
      age: "60-64",
      dx: 5096,
      pop: 14188
    },
    {
      age: "65-69",
      dx: 7194,
      pop: 9119
    },
    {
      age: "70-74",
      dx: 9910,
      pop: 9119
    },
    {
      age: "75-79",
      dx: 13031,
      pop: 6425
    },
    {
      age: "80-84",
      dx: 16468,
      pop: 6425
    },
    {
      age: "85-89",
      dx: 17004,
      pop: 1370
    }, //3571
    {
      age: "90-94",
      dx: 12491,
      pop: 900
    },
    {
      age: "95-99",
      dx: 5327,
      pop: 700
    },
    {
      age: "100-104",
      dx: 1126,
      pop: 300
    },
    {
      age: "105-109",
      dx: 103,
      pop: 200
    },
    {
      age: "110",
      dx: 4,
      pop: 100
    }
  ],
  "2010": [
    {
      age: "0",
      dx: 687,
      pop: 5000
    },
    {
      age: "1-4",
      dx: 115,
      pop: 15201
    },
    {
      age: "5-9",
      dx: 67,
      pop: 20349
    },
    {
      age: "10-14",
      dx: 80,
      pop: 20677
    },
    {
      age: "15-19",
      dx: 292,
      pop: 22040
    },
    {
      age: "20-24",
      dx: 472,
      pop: 21586
    },
    {
      age: "25-29",
      dx: 494,
      pop: 21102
    },
    {
      age: "30-34",
      dx: 549,
      pop: 19962
    },
    {
      age: "35-39",
      dx: 713,
      pop: 20180
    },
    {
      age: "40-44",
      dx: 1075,
      pop: 20891
    },
    {
      age: "45-49",
      dx: 1629,
      pop: 22709
    },
    {
      age: "50-54",
      dx: 2370,
      pop: 22298
    },
    {
      age: "55-59",
      dx: 3252,
      pop: 19665
    },
    {
      age: "60-64",
      dx: 4634,
      pop: 16818
    },
    {
      age: "65-69",
      dx: 6483,
      pop: 12435
    },
    {
      age: "70-74",
      dx: 9048,
      pop: 9278
    },
    {
      age: "75-79",
      dx: 12248,
      pop: 7318
    },
    {
      age: "80-84",
      dx: 15912,
      pop: 5743
    },
    {
      age: "85-89",
      dx: 17644,
      pop: 2789 /** 3620*/
    },
    {
      age: "90-94",
      dx: 14105,
      pop: 1448
    },
    {
      age: "95-99",
      dx: 6496,
      pop: 371
    },
    {
      age: "100-104",
      dx: 1487,
      pop: 33
    },
    {
      age: "105-109",
      dx: 145,
      pop: 20
    },
    {
      age: "110",
      dx: 6,
      pop: 10
    }
  ],
  "2015": [
    {
      age: "0",
      dx: 598,
      pop: 4000
    },
    {
      age: "1-4",
      dx: 103,
      pop: 15865
    },
    {
      age: "5-9",
      dx: 58,
      pop: 20522
    },
    {
      age: "10-14",
      dx: 70,
      pop: 20642
    },
    {
      age: "15-19",
      dx: 232,
      pop: 20807
    },
    {
      age: "20-24",
      dx: 420,
      pop: 22278
    },
    {
      age: "25-29",
      dx: 480,
      pop: 21474
    },
    {
      age: "30-34",
      dx: 557,
      pop: 20974
    },
    {
      age: "35-39",
      dx: 686,
      pop: 19407
    },
    {
      age: "40-44",
      dx: 968,
      pop: 20382
    },
    {
      age: "45-49",
      dx: 1507,
      pop: 20668
    },
    {
      age: "50-54",
      dx: 2301,
      pop: 22355
    },
    {
      age: "55-59",
      dx: 3268,
      pop: 21109
    },
    {
      age: "60-64",
      dx: 4439,
      pop: 18440
    },
    {
      age: "65-69",
      dx: 6093,
      pop: 14986
    },
    {
      age: "70-74",
      dx: 8523,
      pop: 10805
    },
    {
      age: "75-79",
      dx: 11708,
      pop: 7804 //75-79 23.5%+/5yrs+ 2015-2020 7.804m-9643.m
    },
    {
      age: "80-84",
      dx: 15248,
      pop: 5627 //80-84 9.15%/5yrs+ 2015-2020 5.627m-6.142m
    },
    {
      age: "85-89",
      dx: 17845,
      pop: 1800
    }, //5255
    {
      age: "90-94",
      dx: 15306,
      pop: 1200
    },
    {
      age: "95-99",
      dx: 7539,
      pop: 1000
    },
    {
      age: "100-104",
      dx: 1855,
      pop: 600
    },
    {
      age: "105-109",
      dx: 192,
      pop: 400
    },
    {
      age: "110",
      dx: 8,
      pop: 200
    }
  ],
  /*"2015-2018": [
    {
      age: "0",
      dx: 575,
      pop: 5000
    },
    {
      age: "1-4",
      dx: 98,
      pop: 14580
    },
    {
      age: "5-9",
      dx: 58,
      pop: 20290
    },
    {
      age: "10-14",
      dx: 74,
      pop: 20800
    },
    {
      age: "15-19",
      dx: 248,
      pop: 21060
    },
    {
      age: "20-24",
      dx: 460,
      pop: 21630
    },
    {
      age: "25-29",
      dx: 570,
      pop: 13500
    },
    {
      age: "30-34",
      dx: 678,
      pop: 22430
    },
    {
      age: "35-39",
      dx: 818,
      pop: 21730
    },
    {
      age: "40-44",
      dx: 1027,
      pop: 19920
    },
    {
      age: "45-49",
      dx: 1482,
      pop: 20400
    },
    {
      age: "50-54",
      dx: 2267,
      pop: 20480
    },
    {
      age: "55-59",
      dx: 3322,
      pop: 21870
    },
    {
      age: "60-64",
      dx: 4541,
      pop: 20570
    },
    {
      age: "65-69",
      dx: 5980,
      pop: 17460
    },
    {
      age: "70-74",
      dx: 8290,
      pop: 14030
    },
    {
      age: "75-79",
      dx: 11368,
      pop: 9650
    },
    {
      age: "80-84",
      dx: 14775,
      pop: 6320
    },
    {
      age: "85-89",
      dx: 17261,
      pop: 2200
    }, //6610
    {
      age: "90-94",
      dx: 15555,
      pop: 1800
    },
    {
      age: "95-99",
      dx: 8114,
      pop: 1200
    },
    {
      age: "100-104",
      dx: 2178,
      pop: 800
    },
    {
      age: "105-109",
      dx: 251,
      pop: 400
    },
    {
      age: "110",
      dx: 12,
      pop: 200
    }
  ],*[
 {
   "age": 0,
   "deathprob": 0.0055635
 },
 {
   "age": 1,
   "deathprob": 0.000387
 },
 {
   "age": 2,
   "deathprob": 0.000236
 },
 {
   "age": 3,
   "deathprob": 0.00018
 },
 {
   "age": 4,
   "deathprob": 0.0001455
 },
 {
   "age": 5,
   "deathprob": 0.000132
 },
 {
   "age": 6,
   "deathprob": 0.000123
 },
 {
   "age": 7,
   "deathprob": 0.000115
 },
 {
   "age": 8,
   "deathprob": 0.0001075
 },
 {
   "age": 9,
   "deathprob": 0.0000995
 },
 {
   "age": 10,
   "deathprob": 0.0000965
 },
 {
   "age": 11,
   "deathprob": 0.000104
 },
 {
   "age": 12,
   "deathprob": 0.0001305
 },
 {
   "age": 13,
   "deathprob": 0.0001795
 },
 {
   "age": 14,
   "deathprob": 0.000247
 },
 {
   "age": 15,
   "deathprob": 0.0003205
 },
 {
   "age": 16,
   "deathprob": 0.000396
 },
 {
   "age": 17,
   "deathprob": 0.000477
 },
 {
   "age": 18,
   "deathprob": 0.0005625
 },
 {
   "age": 19,
   "deathprob": 0.0006495
 },
 {
   "age": 20,
   "deathprob": 0.000742
 },
 {
   "age": 21,
   "deathprob": 0.000833
 },
 {
   "age": 22,
   "deathprob": 0.000909
 },
 {
   "age": 23,
   "deathprob": 0.0009645
 },
 {
   "age": 24,
   "deathprob": 0.0010055
 },
 {
   "age": 25,
   "deathprob": 0.0010415
 },
 {
   "age": 26,
   "deathprob": 0.001082
 },
 {
   "age": 27,
   "deathprob": 0.001127
 },
 {
   "age": 28,
   "deathprob": 0.001181
 },
 {
   "age": 29,
   "deathprob": 0.0012415
 },
 {
   "age": 30,
   "deathprob": 0.0013045
 },
 {
   "age": 31,
   "deathprob": 0.001366
 },
 {
   "age": 32,
   "deathprob": 0.0014295
 },
 {
   "age": 33,
   "deathprob": 0.001492
 },
 {
   "age": 34,
   "deathprob": 0.0015565
 },
 {
   "age": 35,
   "deathprob": 0.001627
 },
 {
   "age": 36,
   "deathprob": 0.0017025
 },
 {
   "age": 37,
   "deathprob": 0.001777
 },
 {
   "age": 38,
   "deathprob": 0.0018475
 },
 {
   "age": 39,
   "deathprob": 0.0019195
 },
 {
   "age": 40,
   "deathprob": 0.002002
 },
 {
   "age": 41,
   "deathprob": 0.0020995
 },
 {
   "age": 42,
   "deathprob": 0.002212
 },
 {
   "age": 43,
   "deathprob": 0.0023425
 },
 {
   "age": 44,
   "deathprob": 0.0024925
 },
 {
   "age": 45,
   "deathprob": 0.0026635
 },
 {
   "age": 46,
   "deathprob": 0.002859
 },
 {
   "age": 47,
   "deathprob": 0.0030815
 },
 {
   "age": 48,
   "deathprob": 0.003335
 },
 {
   "age": 49,
   "deathprob": 0.003621
 },
 {
   "age": 50,
   "deathprob": 0.003934
 },
 {
   "age": 51,
   "deathprob": 0.0042795
 },
 {
   "age": 52,
   "deathprob": 0.0046685
 },
 {
   "age": 53,
   "deathprob": 0.005106
 },
 {
   "age": 54,
   "deathprob": 0.0055885
 },
 {
   "age": 55,
   "deathprob": 0.0061085
 },
 {
   "age": 56,
   "deathprob": 0.006658
 },
 {
   "age": 57,
   "deathprob": 0.007236
 },
 {
   "age": 58,
   "deathprob": 0.0078385
 },
 {
   "age": 59,
   "deathprob": 0.0084685
 },
 {
   "age": 60,
   "deathprob": 0.0091635
 },
 {
   "age": 61,
   "deathprob": 0.009903
 },
 {
   "age": 62,
   "deathprob": 0.010627
 },
 {
   "age": 63,
   "deathprob": 0.011316
 },
 {
   "age": 64,
   "deathprob": 0.01201
 },
 {
   "age": 65,
   "deathprob": 0.0127985
 },
 {
   "age": 66,
   "deathprob": 0.0137135
 },
 {
   "age": 67,
   "deathprob": 0.014719
 },
 {
   "age": 68,
   "deathprob": 0.015824
 },
 {
   "age": 69,
   "deathprob": 0.017065
 },
 {
   "age": 70,
   "deathprob": 0.018513
 },
 {
   "age": 71,
   "deathprob": 0.0201895
 },
 {
   "age": 72,
   "deathprob": 0.0220705
 },
 {
   "age": 73,
   "deathprob": 0.0241715
 },
 {
   "age": 74,
   "deathprob": 0.02654
 },
 {
   "age": 75,
   "deathprob": 0.0293285
 },
 {
   "age": 76,
   "deathprob": 0.0325245
 },
 {
   "age": 77,
   "deathprob": 0.035998
 },
 {
   "age": 78,
   "deathprob": 0.039734
 },
 {
   "age": 79,
   "deathprob": 0.0438635
 },
 {
   "age": 80,
   "deathprob": 0.0486535
 },
 {
   "age": 81,
   "deathprob": 0.0542035
 },
 {
   "age": 82,
   "deathprob": 0.060424
 },
 {
   "age": 83,
   "deathprob": 0.067356
 },
 {
   "age": 84,
   "deathprob": 0.075118
 },
 {
   "age": 85,
   "deathprob": 0.08385
 },
 {
   "age": 86,
   "deathprob": 0.093674
 },
 {
   "age": 87,
   "deathprob": 0.104679
 },
 {
   "age": 88,
   "deathprob": 0.1169185
 },
 {
   "age": 89,
   "deathprob": 0.130413
 },
 {
   "age": 90,
   "deathprob": 0.1451655
 },
 {
   "age": 91,
   "deathprob": 0.1611645
 },
 {
   "age": 92,
   "deathprob": 0.178389
 },
 {
   "age": 93,
   "deathprob": 0.1968065
 },
 {
   "age": 94,
   "deathprob": 0.2163775
 },
 {
   "age": 95,
   "deathprob": 0.2359515
 },
 {
   "age": 96,
   "deathprob": 0.255178
 },
 {
   "age": 97,
   "deathprob": 0.2736815
 },
 {
   "age": 98,
   "deathprob": 0.2910725
 },
 {
   "age": 99,
   "deathprob": 0.306959
 },
 {
   "age": 100,
   "deathprob": 0.32372
 },
 {
   "age": 101,
   "deathprob": 0.3414035
 },
 {
   "age": 102,
   "deathprob": 0.3600615
 },
 {
   "age": 103,
   "deathprob": 0.379747
 },
 {
   "age": 104,
   "deathprob": 0.4005185
 },
 {
   "age": 105,
   "deathprob": 0.422435
 },
 {
   "age": 106,
   "deathprob": 0.445561
 },
 {
   "age": 107,
   "deathprob": 0.4699635
 },
 {
   "age": 108,
   "deathprob": 0.495714
 },
 {
   "age": 109,
   "deathprob": 0.5228865
 },
 {
   "age": 110,
   "deathprob": 0.551561
 },
 {
   "age": 111,
   "deathprob": 0.5818215
 },
 {
   "age": 112,
   "deathprob": 0.6137555
 },
 {
   "age": 113,
   "deathprob": 0.6474565
 },
 {
   "age": 114,
   "deathprob": 0.683024
 },
 {
   "age": 115,
   "deathprob": 0.7205615
 },
 {
   "age": 116,
   "deathprob": 0.759422
 },
 {
   "age": 117,
   "deathprob": 0.797393
 },
 {
   "age": 118,
   "deathprob": 0.837263
 },
 {
   "age": 119,
   "deathprob": 0.879126
 }
  ]*å
  "2018": [
    {
      age: "0",
      dx: 556.35,
      pop: 5000
    },
    {
      age: "1-4",
      dx: 94.85,
      pop: 14580
    },
    {
      age: "5-9",
      dx: 57.7,
      pop: 20430
    },
    {
      age: "10-14",
      dx: 75.75,
      pop: 21827
    },
    {
      age: "15-19",
      dx: 240.55,
      pop: 21628
    },
    {
      age: "20-24",
      dx: 653.0,
      pop: 21537
    },
    {
      age: "25-29",
      dx: 817.0,
      pop: 22964
    },
    {
      age: "30-34",
      dx: 951.0,
      pop: 22902
    },
    {
      age: "35-39",
      dx: 1139.0,
      pop: 22292
    },
    {
      age: "40-44",
      dx: 1373.0,
      pop: 20643
    },
    {
      age: "45-49",
      dx: 1943.0,
      pop: 20510
    },
    {
      age: "50-54",
      dx: 2953.0,
      pop: 20846
    },
    {
      age: "55-59",
      dx: 4593.0,
      pop: 22187
    },
    {
      age: "60-64",
      dx: 6673.0,
      pop: 21072
    },
    {
      age: "65-69",
      dx: 9253.0,
      pop: 17962
    },
    {
      age: "70-74",
      dx: 13611.0,
      pop: 14493
    },
    {
      age: "75-79",
      dx: 21631.0,
      pop: 9643
    },
    {
      age: "80-84",
      dx: 35581.0,
      pop: 6142
    },
    {
      age: "85-89",
      dx: 60425.0,
      pop: 2000
    }, //6063
    {
      age: "90-94",
      dx: 100686.0,
      pop: 1700
    },
    {
      age: "95-99",
      dx: 152096.0,
      pop: 1120
    },
    {
      age: "100-104",
      dx: 180545.05,
      pop: 720
    },
    {
      age: "105-109",
      dx: 235656,
      pop: 310
    },
    {
      age: "110",
      dx: 307761.85 + 399376.55,
      pop: 196
    }
  ],
  "2019": [
    {
      age: "0",
      dx: 556.35,
      pop: 5000
    },
    {
      age: "1-4",
      dx: 94.85,
      pop: 14580
    },
    {
      age: "5-9",
      dx: 57.7,
      pop: 20430
    },
    {
      age: "10-14",
      dx: 75.75,
      pop: 21827
    },
    {
      age: "15-19",
      dx: 240.55,
      pop: 21628
    },
    {
      age: "20-24",
      dx: 445.4,
      pop: 21537
    },
    {
      age: "25-29",
      dx: 567.3,
      pop: 22964
    },
    {
      age: "30-34",
      dx: 714.85,
      pop: 22902
    },
    {
      age: "35-39",
      dx: 887.35,
      pop: 22292
    },
    {
      age: "40-44",
      dx: 1114.85,
      pop: 20643
    },
    {
      age: "45-49",
      dx: 1556,
      pop: 20510
    },
    {
      age: "50-54",
      dx: 2357.65,
      pop: 20846
    },
    {
      age: "55-59",
      dx: 3630.95,
      pop: 22187
    },
    {
      age: "60-64",
      dx: 5301.95,
      pop: 21072
    },
    {
      age: "65-69",
      dx: 7412,
      pop: 17962
    },
    {
      age: "70-74",
      dx: 11148.45,
      pop: 14493
    },
    {
      age: "75-79",
      dx: 18144.85,
      pop: 9643
    },
    {
      age: "80-84",
      dx: 30575.5,
      pop: 6142
    },
    {
      age: "85-89",
      dx: 52953.45,
      pop: 2000
    }, //6063
    {
      age: "90-94",
      dx: 89790.3,
      pop: 1700
    },
    {
      age: "95-99",
      dx: 136284.25,
      pop: 1120
    },
    {
      age: "100-104",
      dx: 180545.05,
      pop: 720
    },
    {
      age: "105-109",
      dx: 235656,
      pop: 310
    },
    {
      age: "110",
      dx: 307761.85 + 399376.55,
      pop: 196
    }
  ],*/
  "2020": [
    {
      age: "0",
      dx: 897,
      pop: 5000
    },
    {
      age: "1-4",
      dx: 160,
      pop: 14580
    },
    {
      age: "5-9",
      dx: 95,
      pop: 20430
    },
    {
      age: "10-14",
      dx: 123,
      pop: 21827
    },
    {
      age: "15-19",
      dx: 467,
      pop: 21628
    },
    {
      age: "20-24",
      dx: 618,
      pop: 21537
    },
    {
      age: "25-29",
      dx: 571,
      pop: 22964
    },
    {
      age: "30-34",
      dx: 696,
      pop: 22902
    },
    {
      age: "35-39",
      dx: 1004,
      pop: 22292
    },
    {
      age: "40-44",
      dx: 1425,
      pop: 20643
    },
    {
      age: "45-49",
      dx: 1888,
      pop: 20510
    },
    {
      age: "50-54",
      dx: 2475,
      pop: 20846
    },
    {
      age: "55-59",
      dx: 3727,
      pop: 22187
    },
    {
      age: "60-64",
      dx: 5709,
      pop: 21072
    },
    {
      age: "65-69",
      dx: 9176,
      pop: 17962
    },
    {
      age: "70-74",
      dx: 13175,
      pop: 14493
    },
    {
      age: "75-79",
      dx: 18031,
      pop: 9643
    },
    {
      age: "80-84",
      dx: 24959,
      pop: 6142
    },
    {
      age: "85-89",
      dx: 35907,
      pop: 2000
    }, //6063
    {
      age: "90-94",
      dx: 36585,
      pop: 1700
    },
    {
      age: "95-99",
      dx: 25859,
      pop: 1120
    },
    {
      age: "100-104",
      dx: 11800,
      pop: 720
    },
    {
      age: "105-109",
      dx: 3793,
      pop: 310
    },
    {
      age: "110",
      dx: 771 + 82,
      pop: 196
    }
  ]
};

const yearly = {
  "2000": {
    "20": 0.00136,
    "21": 0.00145,
    "22": 0.00138,
    "23": 0.00136,
    "24": 0.00135,
    "25": 0.00126,
    "26": 0.00128,
    "27": 0.0013,
    "28": 0.00127,
    "29": 0.00132,
    "30": 0.00127,
    "31": 0.00143,
    "32": 0.00145,
    "33": 0.00157,
    "34": 0.00168,
    "35": 0.0017,
    "36": 0.0019,
    "37": 0.00205,
    "38": 0.00225,
    "39": 0.00235,
    "40": 0.00255,
    "41": 0.00284,
    "42": 0.00298,
    "43": 0.00336,
    "44": 0.0036,
    "45": 0.00379,
    "46": 0.00426,
    "47": 0.00455,
    "48": 0.00498,
    "49": 0.00532,
    "50": 0.00546,
    "51": 0.00598,
    "52": 0.00631,
    "53": 0.00693,
    "54": 0.00766,
    "55": 0.00826,
    "56": 0.00893,
    "57": 0.00978,
    "58": 0.01086,
    "59": 0.0119,
    "60": 0.01265,
    "61": 0.01371,
    "62": 0.0152,
    "63": 0.01686,
    "64": 0.01835,
    "65": 0.02024,
    "66": 0.02169,
    "67": 0.024,
    "68": 0.02607,
    "69": 0.02818,
    "70": 0.03115,
    "71": 0.03434,
    "72": 0.03756,
    "73": 0.04072,
    "74": 0.04424,
    "75": 0.04819,
    "76": 0.05249,
    "77": 0.05761,
    "78": 0.0629,
    "79": 0.06885,
    "80": 0.07581,
    "81": 0.08346,
    "82": 0.09182,
    "83": 0.10103,
    "84": 0.11113,
    "85": 0.1224,
    "86": 0.13532,
    "87": 0.14781,
    "88": 0.16166,
    "89": 0.17753,
    "90": 0.19208,
    "91": 0.20788,
    "92": 0.2274,
    "93": 0.24697,
    "94": 0.267,
    "95": 0.28792,
    "96": 0.30016,
    "97": 0.31635,
    "98": 0.33773,
    "99": 0.34082
  },
  "2001": {
    "20": 0.00135,
    "21": 0.00149,
    "22": 0.00144,
    "23": 0.00139,
    "24": 0.00138,
    "25": 0.00133,
    "26": 0.00138,
    "27": 0.00135,
    "28": 0.0014,
    "29": 0.00137,
    "30": 0.00142,
    "31": 0.00141,
    "32": 0.00147,
    "33": 0.00161,
    "34": 0.00169,
    "35": 0.00187,
    "36": 0.0019,
    "37": 0.00215,
    "38": 0.00231,
    "39": 0.00243,
    "40": 0.00261,
    "41": 0.00276,
    "42": 0.00298,
    "43": 0.00331,
    "44": 0.00355,
    "45": 0.0039,
    "46": 0.00412,
    "47": 0.00461,
    "48": 0.00496,
    "49": 0.00532,
    "50": 0.00562,
    "51": 0.00591,
    "52": 0.00636,
    "53": 0.00678,
    "54": 0.00711,
    "55": 0.0083,
    "56": 0.00875,
    "57": 0.00968,
    "58": 0.01045,
    "59": 0.01144,
    "60": 0.01269,
    "61": 0.01334,
    "62": 0.01484,
    "63": 0.01605,
    "64": 0.01768,
    "65": 0.01957,
    "66": 0.02137,
    "67": 0.02328,
    "68": 0.02557,
    "69": 0.02794,
    "70": 0.03041,
    "71": 0.03316,
    "72": 0.03637,
    "73": 0.03999,
    "74": 0.04344,
    "75": 0.04732,
    "76": 0.0519,
    "77": 0.05648,
    "78": 0.06171,
    "79": 0.06743,
    "80": 0.07386,
    "81": 0.08192,
    "82": 0.0908,
    "83": 0.09933,
    "84": 0.10881,
    "85": 0.12029,
    "86": 0.13252,
    "87": 0.14565,
    "88": 0.15992,
    "89": 0.17533,
    "90": 0.19017,
    "91": 0.20594,
    "92": 0.22405,
    "93": 0.24466,
    "94": 0.26516,
    "95": 0.28284,
    "96": 0.30478,
    "97": 0.32141,
    "98": 0.33228,
    "99": 0.33095
  },
  "2002": {
    "20": 0.00137,
    "21": 0.00144,
    "22": 0.00139,
    "23": 0.00143,
    "24": 0.00141,
    "25": 0.00135,
    "26": 0.00142,
    "27": 0.00132,
    "28": 0.00134,
    "29": 0.00142,
    "30": 0.00144,
    "31": 0.00147,
    "32": 0.00141,
    "33": 0.00161,
    "34": 0.00167,
    "35": 0.0018,
    "36": 0.0019,
    "37": 0.00203,
    "38": 0.00224,
    "39": 0.00241,
    "40": 0.00268,
    "41": 0.00283,
    "42": 0.00298,
    "43": 0.0033,
    "44": 0.0036,
    "45": 0.00383,
    "46": 0.0043,
    "47": 0.00445,
    "48": 0.00497,
    "49": 0.00529,
    "50": 0.00576,
    "51": 0.00611,
    "52": 0.00641,
    "53": 0.00698,
    "54": 0.00743,
    "55": 0.00781,
    "56": 0.00901,
    "57": 0.00936,
    "58": 0.01045,
    "59": 0.01128,
    "60": 0.01255,
    "61": 0.01345,
    "62": 0.01473,
    "63": 0.016,
    "64": 0.01724,
    "65": 0.01909,
    "66": 0.02084,
    "67": 0.02286,
    "68": 0.02497,
    "69": 0.02742,
    "70": 0.03,
    "71": 0.03259,
    "72": 0.0355,
    "73": 0.03895,
    "74": 0.04286,
    "75": 0.04666,
    "76": 0.05109,
    "77": 0.05602,
    "78": 0.06091,
    "79": 0.06657,
    "80": 0.07318,
    "81": 0.08065,
    "82": 0.08915,
    "83": 0.09835,
    "84": 0.10822,
    "85": 0.12016,
    "86": 0.13279,
    "87": 0.14559,
    "88": 0.16086,
    "89": 0.1764,
    "90": 0.19217,
    "91": 0.2099,
    "92": 0.23016,
    "93": 0.24978,
    "94": 0.2684,
    "95": 0.28485,
    "96": 0.30673,
    "97": 0.32883,
    "98": 0.34698,
    "99": 0.34845
  },
  "2003": {
    "20": 0.00139,
    "21": 0.00142,
    "22": 0.00147,
    "23": 0.00142,
    "24": 0.00142,
    "25": 0.00137,
    "26": 0.0014,
    "27": 0.00137,
    "28": 0.00133,
    "29": 0.00142,
    "30": 0.00141,
    "31": 0.00146,
    "32": 0.00153,
    "33": 0.00153,
    "34": 0.00163,
    "35": 0.00176,
    "36": 0.0019,
    "37": 0.00204,
    "38": 0.00215,
    "39": 0.00236,
    "40": 0.00255,
    "41": 0.00282,
    "42": 0.00304,
    "43": 0.00324,
    "44": 0.00361,
    "45": 0.00381,
    "46": 0.00426,
    "47": 0.00464,
    "48": 0.00491,
    "49": 0.00536,
    "50": 0.00579,
    "51": 0.00619,
    "52": 0.00657,
    "53": 0.00677,
    "54": 0.00762,
    "55": 0.00813,
    "56": 0.00839,
    "57": 0.00955,
    "58": 0.01014,
    "59": 0.01135,
    "60": 0.01214,
    "61": 0.01341,
    "62": 0.01472,
    "63": 0.01542,
    "64": 0.01703,
    "65": 0.01888,
    "66": 0.02035,
    "67": 0.02232,
    "68": 0.02441,
    "69": 0.02679,
    "70": 0.02914,
    "71": 0.03143,
    "72": 0.03461,
    "73": 0.03786,
    "74": 0.04137,
    "75": 0.04575,
    "76": 0.04994,
    "77": 0.05453,
    "78": 0.05986,
    "79": 0.06547,
    "80": 0.07179,
    "81": 0.07891,
    "82": 0.08646,
    "83": 0.09556,
    "84": 0.10638,
    "85": 0.11654,
    "86": 0.12834,
    "87": 0.14263,
    "88": 0.15752,
    "89": 0.17301,
    "90": 0.18971,
    "91": 0.20778,
    "92": 0.22534,
    "93": 0.24365,
    "94": 0.26196,
    "95": 0.28286,
    "96": 0.30725,
    "97": 0.32325,
    "98": 0.33325,
    "99": 0.3465
  },
  "2004": {
    "20": 0.00133,
    "21": 0.00145,
    "22": 0.00143,
    "23": 0.00139,
    "24": 0.00139,
    "25": 0.00145,
    "26": 0.00142,
    "27": 0.00143,
    "28": 0.00135,
    "29": 0.00139,
    "30": 0.00131,
    "31": 0.00144,
    "32": 0.0015,
    "33": 0.0015,
    "34": 0.00154,
    "35": 0.00175,
    "36": 0.0018,
    "37": 0.00196,
    "38": 0.00208,
    "39": 0.0022,
    "40": 0.00243,
    "41": 0.0027,
    "42": 0.00296,
    "43": 0.00316,
    "44": 0.00331,
    "45": 0.00381,
    "46": 0.00407,
    "47": 0.00449,
    "48": 0.00485,
    "49": 0.00506,
    "50": 0.00567,
    "51": 0.00611,
    "52": 0.00666,
    "53": 0.00707,
    "54": 0.00723,
    "55": 0.00794,
    "56": 0.00841,
    "57": 0.00886,
    "58": 0.01011,
    "59": 0.01062,
    "60": 0.0119,
    "61": 0.01267,
    "62": 0.01405,
    "63": 0.01525,
    "64": 0.01617,
    "65": 0.01752,
    "66": 0.01961,
    "67": 0.02138,
    "68": 0.02316,
    "69": 0.02537,
    "70": 0.02785,
    "71": 0.03015,
    "72": 0.03277,
    "73": 0.03587,
    "74": 0.03959,
    "75": 0.04374,
    "76": 0.04775,
    "77": 0.05213,
    "78": 0.05727,
    "79": 0.06297,
    "80": 0.06896,
    "81": 0.07543,
    "82": 0.08331,
    "83": 0.0925,
    "84": 0.10182,
    "85": 0.11225,
    "86": 0.12359,
    "87": 0.13661,
    "88": 0.15182,
    "89": 0.16622,
    "90": 0.18205,
    "91": 0.19931,
    "92": 0.21629,
    "93": 0.23648,
    "94": 0.25864,
    "95": 0.27879,
    "96": 0.29965,
    "97": 0.31842,
    "98": 0.32704,
    "99": 0.33746
  },
  "2005": {
    "20": 0.00134,
    "21": 0.00151,
    "22": 0.00149,
    "23": 0.00149,
    "24": 0.00145,
    "25": 0.00145,
    "26": 0.00149,
    "27": 0.00148,
    "28": 0.00143,
    "29": 0.00139,
    "30": 0.00139,
    "31": 0.0015,
    "32": 0.00153,
    "33": 0.00153,
    "34": 0.00163,
    "35": 0.00162,
    "36": 0.00173,
    "37": 0.00195,
    "38": 0.00209,
    "39": 0.00225,
    "40": 0.00244,
    "41": 0.00263,
    "42": 0.00299,
    "43": 0.00318,
    "44": 0.00352,
    "45": 0.00372,
    "46": 0.00409,
    "47": 0.00437,
    "48": 0.00478,
    "49": 0.00536,
    "50": 0.00563,
    "51": 0.00608,
    "52": 0.00683,
    "53": 0.00716,
    "54": 0.00755,
    "55": 0.00798,
    "56": 0.00846,
    "57": 0.00919,
    "58": 0.00947,
    "59": 0.01106,
    "60": 0.01173,
    "61": 0.01256,
    "62": 0.01386,
    "63": 0.01515,
    "64": 0.01646,
    "65": 0.0172,
    "66": 0.0193,
    "67": 0.02091,
    "68": 0.02259,
    "69": 0.02483,
    "70": 0.02746,
    "71": 0.03018,
    "72": 0.03278,
    "73": 0.03573,
    "74": 0.03913,
    "75": 0.04257,
    "76": 0.04682,
    "77": 0.05173,
    "78": 0.05696,
    "79": 0.06258,
    "80": 0.06871,
    "81": 0.07539,
    "82": 0.08289,
    "83": 0.0912,
    "84": 0.10091,
    "85": 0.11192,
    "86": 0.12404,
    "87": 0.13709,
    "88": 0.15059,
    "89": 0.16658,
    "90": 0.18464,
    "91": 0.20301,
    "92": 0.2208,
    "93": 0.2432,
    "94": 0.26521,
    "95": 0.28228,
    "96": 0.2971,
    "97": 0.32368,
    "98": 0.33997,
    "99": 0.34641
  },
  "2006": {
    "20": 0.00141,
    "21": 0.0015,
    "22": 0.00149,
    "23": 0.00154,
    "24": 0.00153,
    "25": 0.00152,
    "26": 0.00148,
    "27": 0.00153,
    "28": 0.00147,
    "29": 0.00151,
    "30": 0.00147,
    "31": 0.00153,
    "32": 0.00151,
    "33": 0.00157,
    "34": 0.00166,
    "35": 0.00176,
    "36": 0.00172,
    "37": 0.00188,
    "38": 0.00206,
    "39": 0.00223,
    "40": 0.00246,
    "41": 0.00255,
    "42": 0.00289,
    "43": 0.00316,
    "44": 0.00337,
    "45": 0.00368,
    "46": 0.00386,
    "47": 0.00438,
    "48": 0.0048,
    "49": 0.00514,
    "50": 0.00572,
    "51": 0.00591,
    "52": 0.00663,
    "53": 0.00711,
    "54": 0.00753,
    "55": 0.00804,
    "56": 0.00824,
    "57": 0.00908,
    "58": 0.00995,
    "59": 0.01013,
    "60": 0.01179,
    "61": 0.01196,
    "62": 0.0135,
    "63": 0.01442,
    "64": 0.01582,
    "65": 0.01798,
    "66": 0.01907,
    "67": 0.02073,
    "68": 0.02208,
    "69": 0.0244,
    "70": 0.02612,
    "71": 0.02866,
    "72": 0.03167,
    "73": 0.03449,
    "74": 0.03776,
    "75": 0.04119,
    "76": 0.04595,
    "77": 0.05003,
    "78": 0.05469,
    "79": 0.06027,
    "80": 0.0668,
    "81": 0.07423,
    "82": 0.08153,
    "83": 0.08849,
    "84": 0.09769,
    "85": 0.10761,
    "86": 0.11975,
    "87": 0.13341,
    "88": 0.14643,
    "89": 0.16294,
    "90": 0.17829,
    "91": 0.19627,
    "92": 0.21518,
    "93": 0.23391,
    "94": 0.25657,
    "95": 0.27484,
    "96": 0.29219,
    "97": 0.31449,
    "98": 0.32309,
    "99": 0.33457
  },
  "2007": {
    "20": 0.00132,
    "21": 0.00146,
    "22": 0.00153,
    "23": 0.00146,
    "24": 0.00152,
    "25": 0.00143,
    "26": 0.00145,
    "27": 0.00146,
    "28": 0.00148,
    "29": 0.00151,
    "30": 0.00147,
    "31": 0.00151,
    "32": 0.00146,
    "33": 0.00155,
    "34": 0.00165,
    "35": 0.00167,
    "36": 0.00176,
    "37": 0.00186,
    "38": 0.00202,
    "39": 0.00212,
    "40": 0.00233,
    "41": 0.00254,
    "42": 0.00268,
    "43": 0.00299,
    "44": 0.00338,
    "45": 0.00364,
    "46": 0.00395,
    "47": 0.00407,
    "48": 0.0046,
    "49": 0.00499,
    "50": 0.00548,
    "51": 0.00604,
    "52": 0.0063,
    "53": 0.00701,
    "54": 0.00735,
    "55": 0.00815,
    "56": 0.00846,
    "57": 0.00893,
    "58": 0.00964,
    "59": 0.01033,
    "60": 0.01084,
    "61": 0.01222,
    "62": 0.01281,
    "63": 0.01444,
    "64": 0.01544,
    "65": 0.01706,
    "66": 0.01851,
    "67": 0.02,
    "68": 0.0216,
    "69": 0.02362,
    "70": 0.02554,
    "71": 0.02794,
    "72": 0.03049,
    "73": 0.034,
    "74": 0.03662,
    "75": 0.04037,
    "76": 0.0437,
    "77": 0.04828,
    "78": 0.05337,
    "79": 0.05852,
    "80": 0.06475,
    "81": 0.072,
    "82": 0.07886,
    "83": 0.08658,
    "84": 0.0963,
    "85": 0.10687,
    "86": 0.11724,
    "87": 0.12923,
    "88": 0.14351,
    "89": 0.15677,
    "90": 0.1762,
    "91": 0.19251,
    "92": 0.20903,
    "93": 0.23033,
    "94": 0.25103,
    "95": 0.27607,
    "96": 0.28463,
    "97": 0.30597,
    "98": 0.32565,
    "99": 0.33339
  },
  "2008": {
    "20": 0.00131,
    "21": 0.00138,
    "22": 0.00144,
    "23": 0.0014,
    "24": 0.00142,
    "25": 0.00141,
    "26": 0.00138,
    "27": 0.00141,
    "28": 0.00144,
    "29": 0.00149,
    "30": 0.00148,
    "31": 0.0015,
    "32": 0.00148,
    "33": 0.00153,
    "34": 0.00157,
    "35": 0.00162,
    "36": 0.00171,
    "37": 0.00189,
    "38": 0.00193,
    "39": 0.00203,
    "40": 0.00218,
    "41": 0.00247,
    "42": 0.00267,
    "43": 0.00283,
    "44": 0.00321,
    "45": 0.0035,
    "46": 0.00384,
    "47": 0.0042,
    "48": 0.00442,
    "49": 0.005,
    "50": 0.00545,
    "51": 0.00584,
    "52": 0.00641,
    "53": 0.00673,
    "54": 0.00751,
    "55": 0.00819,
    "56": 0.0086,
    "57": 0.00907,
    "58": 0.00948,
    "59": 0.01036,
    "60": 0.01153,
    "61": 0.01155,
    "62": 0.01318,
    "63": 0.01386,
    "64": 0.01573,
    "65": 0.0168,
    "66": 0.01823,
    "67": 0.01985,
    "68": 0.02161,
    "69": 0.02362,
    "70": 0.02525,
    "71": 0.02764,
    "72": 0.03042,
    "73": 0.03347,
    "74": 0.03673,
    "75": 0.04004,
    "76": 0.04344,
    "77": 0.04795,
    "78": 0.05304,
    "79": 0.05915,
    "80": 0.06443,
    "81": 0.07045,
    "82": 0.07833,
    "83": 0.08693,
    "84": 0.09624,
    "85": 0.10566,
    "86": 0.11869,
    "87": 0.12971,
    "88": 0.14396,
    "89": 0.16041,
    "90": 0.17538,
    "91": 0.19472,
    "92": 0.21112,
    "93": 0.23286,
    "94": 0.25536,
    "95": 0.27298,
    "96": 0.28781,
    "97": 0.31228,
    "98": 0.33278,
    "99": 0.34477
  },
  "2009": {
    "20": 0.00119,
    "21": 0.00133,
    "22": 0.00127,
    "23": 0.00135,
    "24": 0.00133,
    "25": 0.00132,
    "26": 0.00138,
    "27": 0.00133,
    "28": 0.00138,
    "29": 0.00145,
    "30": 0.00141,
    "31": 0.00149,
    "32": 0.00147,
    "33": 0.00149,
    "34": 0.00156,
    "35": 0.00168,
    "36": 0.00173,
    "37": 0.00181,
    "38": 0.00193,
    "39": 0.002,
    "40": 0.00222,
    "41": 0.00244,
    "42": 0.00267,
    "43": 0.00282,
    "44": 0.00311,
    "45": 0.00342,
    "46": 0.00377,
    "47": 0.00412,
    "48": 0.00445,
    "49": 0.00472,
    "50": 0.00539,
    "51": 0.00582,
    "52": 0.0064,
    "53": 0.00692,
    "54": 0.00717,
    "55": 0.00798,
    "56": 0.00851,
    "57": 0.00928,
    "58": 0.00967,
    "59": 0.01015,
    "60": 0.01131,
    "61": 0.01175,
    "62": 0.01234,
    "63": 0.01416,
    "64": 0.01475,
    "65": 0.01661,
    "66": 0.01766,
    "67": 0.0192,
    "68": 0.02097,
    "69": 0.02267,
    "70": 0.0245,
    "71": 0.02658,
    "72": 0.0293,
    "73": 0.03196,
    "74": 0.03497,
    "75": 0.0384,
    "76": 0.0417,
    "77": 0.04621,
    "78": 0.05178,
    "79": 0.05553,
    "80": 0.06188,
    "81": 0.06813,
    "82": 0.07545,
    "83": 0.08349,
    "84": 0.09245,
    "85": 0.10191,
    "86": 0.11325,
    "87": 0.12518,
    "88": 0.13709,
    "89": 0.15239,
    "90": 0.16917,
    "91": 0.18323,
    "92": 0.20698,
    "93": 0.22531,
    "94": 0.24308,
    "95": 0.26431,
    "96": 0.28667,
    "97": 0.29963,
    "98": 0.30935,
    "99": 0.33038
  },
  "2010": {
    "20": 0.00111,
    "21": 0.00128,
    "22": 0.00126,
    "23": 0.00129,
    "24": 0.00136,
    "25": 0.00131,
    "26": 0.00137,
    "27": 0.00133,
    "28": 0.00137,
    "29": 0.00139,
    "30": 0.00139,
    "31": 0.00147,
    "32": 0.00147,
    "33": 0.00151,
    "34": 0.00151,
    "35": 0.00155,
    "36": 0.00164,
    "37": 0.00176,
    "38": 0.00186,
    "39": 0.00198,
    "40": 0.00201,
    "41": 0.00226,
    "42": 0.0025,
    "43": 0.00265,
    "44": 0.00302,
    "45": 0.00325,
    "46": 0.00363,
    "47": 0.004,
    "48": 0.00434,
    "49": 0.00482,
    "50": 0.00511,
    "51": 0.00558,
    "52": 0.00613,
    "53": 0.00664,
    "54": 0.00714,
    "55": 0.00768,
    "56": 0.00838,
    "57": 0.00908,
    "58": 0.00975,
    "59": 0.01042,
    "60": 0.01091,
    "61": 0.01154,
    "62": 0.01268,
    "63": 0.01287,
    "64": 0.0151,
    "65": 0.01624,
    "66": 0.01762,
    "67": 0.01839,
    "68": 0.02065,
    "69": 0.02256,
    "70": 0.02446,
    "71": 0.02615,
    "72": 0.02878,
    "73": 0.03147,
    "74": 0.03468,
    "75": 0.03796,
    "76": 0.04206,
    "77": 0.04588,
    "78": 0.05051,
    "79": 0.05512,
    "80": 0.06126,
    "81": 0.0682,
    "82": 0.07544,
    "83": 0.08184,
    "84": 0.09241,
    "85": 0.10279,
    "86": 0.11245,
    "87": 0.12446,
    "88": 0.13966,
    "89": 0.15146,
    "90": 0.1711,
    "91": 0.18571,
    "92": 0.20409,
    "93": 0.22684,
    "94": 0.24507,
    "95": 0.26503,
    "96": 0.28455,
    "97": 0.29669,
    "98": 0.31836,
    "99": 0.33631
  },
  "2011": {
    "20": 0.00109,
    "21": 0.00123,
    "22": 0.00134,
    "23": 0.00135,
    "24": 0.00133,
    "25": 0.00134,
    "26": 0.00135,
    "27": 0.00136,
    "28": 0.00137,
    "29": 0.00141,
    "30": 0.00143,
    "31": 0.00143,
    "32": 0.00153,
    "33": 0.00154,
    "34": 0.00156,
    "35": 0.0016,
    "36": 0.00161,
    "37": 0.00175,
    "38": 0.00189,
    "39": 0.00203,
    "40": 0.00216,
    "41": 0.00222,
    "42": 0.00247,
    "43": 0.00269,
    "44": 0.00286,
    "45": 0.00325,
    "46": 0.00346,
    "47": 0.00398,
    "48": 0.00432,
    "49": 0.00476,
    "50": 0.0052,
    "51": 0.00552,
    "52": 0.00621,
    "53": 0.00667,
    "54": 0.00719,
    "55": 0.00785,
    "56": 0.00849,
    "57": 0.009,
    "58": 0.00965,
    "59": 0.01043,
    "60": 0.01117,
    "61": 0.01157,
    "62": 0.01242,
    "63": 0.01347,
    "64": 0.01396,
    "65": 0.01605,
    "66": 0.01706,
    "67": 0.01874,
    "68": 0.02014,
    "69": 0.02198,
    "70": 0.02435,
    "71": 0.02621,
    "72": 0.02862,
    "73": 0.03117,
    "74": 0.03402,
    "75": 0.03733,
    "76": 0.04133,
    "77": 0.04539,
    "78": 0.04952,
    "79": 0.0545,
    "80": 0.06086,
    "81": 0.06732,
    "82": 0.07516,
    "83": 0.08319,
    "84": 0.09113,
    "85": 0.10196,
    "86": 0.1119,
    "87": 0.12472,
    "88": 0.13643,
    "89": 0.15237,
    "90": 0.16801,
    "91": 0.18746,
    "92": 0.20904,
    "93": 0.22061,
    "94": 0.24724,
    "95": 0.26316,
    "96": 0.28439,
    "97": 0.30533,
    "98": 0.3151,
    "99": 0.3405
  },
  "2012": {
    "20": 0.00109,
    "21": 0.00121,
    "22": 0.00131,
    "23": 0.00125,
    "24": 0.00131,
    "25": 0.00133,
    "26": 0.00137,
    "27": 0.00134,
    "28": 0.00141,
    "29": 0.00146,
    "30": 0.00144,
    "31": 0.00151,
    "32": 0.00145,
    "33": 0.00157,
    "34": 0.0016,
    "35": 0.00164,
    "36": 0.00174,
    "37": 0.00176,
    "38": 0.00185,
    "39": 0.00196,
    "40": 0.00215,
    "41": 0.00228,
    "42": 0.00235,
    "43": 0.00261,
    "44": 0.00285,
    "45": 0.00309,
    "46": 0.00347,
    "47": 0.00379,
    "48": 0.00422,
    "49": 0.0046,
    "50": 0.00518,
    "51": 0.00566,
    "52": 0.00601,
    "53": 0.00658,
    "54": 0.00712,
    "55": 0.0079,
    "56": 0.00846,
    "57": 0.00892,
    "58": 0.00981,
    "59": 0.01049,
    "60": 0.01125,
    "61": 0.0119,
    "62": 0.01267,
    "63": 0.0135,
    "64": 0.01448,
    "65": 0.01509,
    "66": 0.0176,
    "67": 0.01854,
    "68": 0.0203,
    "69": 0.02142,
    "70": 0.02375,
    "71": 0.02578,
    "72": 0.02825,
    "73": 0.03058,
    "74": 0.0333,
    "75": 0.0367,
    "76": 0.04014,
    "77": 0.04455,
    "78": 0.04912,
    "79": 0.05409,
    "80": 0.05961,
    "81": 0.06585,
    "82": 0.07317,
    "83": 0.08233,
    "84": 0.09033,
    "85": 0.09946,
    "86": 0.1107,
    "87": 0.12315,
    "88": 0.13698,
    "89": 0.14918,
    "90": 0.16848,
    "91": 0.18389,
    "92": 0.20075,
    "93": 0.22431,
    "94": 0.24365,
    "95": 0.26806,
    "96": 0.2887,
    "97": 0.30367,
    "98": 0.33441,
    "99": 0.33032
  },
  "2013": {
    "20": 0.00105,
    "21": 0.00119,
    "22": 0.00123,
    "23": 0.00127,
    "24": 0.00129,
    "25": 0.00131,
    "26": 0.00137,
    "27": 0.00139,
    "28": 0.00137,
    "29": 0.00143,
    "30": 0.00148,
    "31": 0.00149,
    "32": 0.0015,
    "33": 0.00156,
    "34": 0.00167,
    "35": 0.00168,
    "36": 0.00172,
    "37": 0.00179,
    "38": 0.00181,
    "39": 0.00198,
    "40": 0.00214,
    "41": 0.00225,
    "42": 0.00248,
    "43": 0.00256,
    "44": 0.00285,
    "45": 0.00307,
    "46": 0.00351,
    "47": 0.00386,
    "48": 0.00414,
    "49": 0.00459,
    "50": 0.0051,
    "51": 0.00563,
    "52": 0.00603,
    "53": 0.00647,
    "54": 0.00717,
    "55": 0.00781,
    "56": 0.00848,
    "57": 0.0091,
    "58": 0.0098,
    "59": 0.01055,
    "60": 0.01134,
    "61": 0.01216,
    "62": 0.01296,
    "63": 0.01363,
    "64": 0.01458,
    "65": 0.01571,
    "66": 0.01642,
    "67": 0.01887,
    "68": 0.01999,
    "69": 0.02204,
    "70": 0.0233,
    "71": 0.02608,
    "72": 0.02797,
    "73": 0.03073,
    "74": 0.03347,
    "75": 0.03652,
    "76": 0.04019,
    "77": 0.04475,
    "78": 0.04905,
    "79": 0.05377,
    "80": 0.05976,
    "81": 0.0661,
    "82": 0.07405,
    "83": 0.08022,
    "84": 0.09102,
    "85": 0.09963,
    "86": 0.11142,
    "87": 0.12444,
    "88": 0.13656,
    "89": 0.15233,
    "90": 0.16731,
    "91": 0.18381,
    "92": 0.20442,
    "93": 0.22605,
    "94": 0.24433,
    "95": 0.26342,
    "96": 0.28678,
    "97": 0.30486,
    "98": 0.31961,
    "99": 0.3394
  },
  "2014": {
    "20": 0.00105,
    "21": 0.00118,
    "22": 0.00126,
    "23": 0.00127,
    "24": 0.00132,
    "25": 0.00136,
    "26": 0.00138,
    "27": 0.00138,
    "28": 0.00144,
    "29": 0.00145,
    "30": 0.00147,
    "31": 0.00158,
    "32": 0.00156,
    "33": 0.00161,
    "34": 0.00169,
    "35": 0.00176,
    "36": 0.00183,
    "37": 0.00185,
    "38": 0.0019,
    "39": 0.002,
    "40": 0.00214,
    "41": 0.00239,
    "42": 0.00244,
    "43": 0.0026,
    "44": 0.00274,
    "45": 0.00309,
    "46": 0.0034,
    "47": 0.00378,
    "48": 0.00418,
    "49": 0.00451,
    "50": 0.00501,
    "51": 0.00556,
    "52": 0.00603,
    "53": 0.00665,
    "54": 0.00702,
    "55": 0.00788,
    "56": 0.0085,
    "57": 0.00922,
    "58": 0.00994,
    "59": 0.01046,
    "60": 0.01142,
    "61": 0.01243,
    "62": 0.01317,
    "63": 0.01401,
    "64": 0.01444,
    "65": 0.01585,
    "66": 0.01713,
    "67": 0.01748,
    "68": 0.0204,
    "69": 0.02142,
    "70": 0.02353,
    "71": 0.02516,
    "72": 0.02805,
    "73": 0.03063,
    "74": 0.0334,
    "75": 0.03666,
    "76": 0.0397,
    "77": 0.04427,
    "78": 0.0481,
    "79": 0.0527,
    "80": 0.05917,
    "81": 0.06541,
    "82": 0.07205,
    "83": 0.07982,
    "84": 0.08905,
    "85": 0.0982,
    "86": 0.10933,
    "87": 0.12066,
    "88": 0.13525,
    "89": 0.14915,
    "90": 0.16469,
    "91": 0.18076,
    "92": 0.20063,
    "93": 0.22241,
    "94": 0.23908,
    "95": 0.25884,
    "96": 0.28135,
    "97": 0.30983,
    "98": 0.32692,
    "99": 0.32417
  },
  "2015": {
    "20": 0.00112,
    "21": 0.00125,
    "22": 0.00135,
    "23": 0.00136,
    "24": 0.00142,
    "25": 0.00144,
    "26": 0.00143,
    "27": 0.00151,
    "28": 0.00152,
    "29": 0.00164,
    "30": 0.00157,
    "31": 0.00166,
    "32": 0.00172,
    "33": 0.00176,
    "34": 0.00184,
    "35": 0.00183,
    "36": 0.00193,
    "37": 0.002,
    "38": 0.00205,
    "39": 0.00216,
    "40": 0.00216,
    "41": 0.00238,
    "42": 0.00255,
    "43": 0.00266,
    "44": 0.00295,
    "45": 0.00305,
    "46": 0.00347,
    "47": 0.00368,
    "48": 0.00408,
    "49": 0.0046,
    "50": 0.00496,
    "51": 0.00553,
    "52": 0.00602,
    "53": 0.00664,
    "54": 0.00729,
    "55": 0.00768,
    "56": 0.0085,
    "57": 0.00926,
    "58": 0.00984,
    "59": 0.01069,
    "60": 0.0113,
    "61": 0.01228,
    "62": 0.01321,
    "63": 0.01448,
    "64": 0.01498,
    "65": 0.01623,
    "66": 0.01721,
    "67": 0.01821,
    "68": 0.01886,
    "69": 0.02206,
    "70": 0.02326,
    "71": 0.02588,
    "72": 0.02735,
    "73": 0.03053,
    "74": 0.0332,
    "75": 0.03674,
    "76": 0.03997,
    "77": 0.04379,
    "78": 0.04831,
    "79": 0.0529,
    "80": 0.05901,
    "81": 0.06672,
    "82": 0.07231,
    "83": 0.08,
    "84": 0.08929,
    "85": 0.09793,
    "86": 0.1095,
    "87": 0.12412,
    "88": 0.13528,
    "89": 0.15031,
    "90": 0.16677,
    "91": 0.18476,
    "92": 0.20286,
    "93": 0.22562,
    "94": 0.24509,
    "95": 0.26751,
    "96": 0.28601,
    "97": 0.30816,
    "98": 0.33108,
    "99": 0.35099
  },
  "2016": {
    "20": 0.00119,
    "21": 0.0014,
    "22": 0.00142,
    "23": 0.0015,
    "24": 0.00156,
    "25": 0.00161,
    "26": 0.00157,
    "27": 0.00169,
    "28": 0.00178,
    "29": 0.00172,
    "30": 0.00178,
    "31": 0.00179,
    "32": 0.00192,
    "33": 0.00193,
    "34": 0.00202,
    "35": 0.00208,
    "36": 0.00207,
    "37": 0.00222,
    "38": 0.00227,
    "39": 0.00235,
    "40": 0.00239,
    "41": 0.00248,
    "42": 0.00259,
    "43": 0.00295,
    "44": 0.00307,
    "45": 0.00324,
    "46": 0.00345,
    "47": 0.0038,
    "48": 0.00417,
    "49": 0.00457,
    "50": 0.00504,
    "51": 0.00535,
    "52": 0.00606,
    "53": 0.00661,
    "54": 0.00727,
    "55": 0.00791,
    "56": 0.00826,
    "57": 0.00931,
    "58": 0.0099,
    "59": 0.01077,
    "60": 0.01149,
    "61": 0.01236,
    "62": 0.01327,
    "63": 0.01409,
    "64": 0.01526,
    "65": 0.01616,
    "66": 0.01705,
    "67": 0.01819,
    "68": 0.01968,
    "69": 0.02049,
    "70": 0.0233,
    "71": 0.02529,
    "72": 0.02776,
    "73": 0.02946,
    "74": 0.0331,
    "75": 0.03654,
    "76": 0.03968,
    "77": 0.0433,
    "78": 0.04686,
    "79": 0.05271,
    "80": 0.05793,
    "81": 0.06363,
    "82": 0.0711,
    "83": 0.07796,
    "84": 0.08728,
    "85": 0.09623,
    "86": 0.10733,
    "87": 0.1199,
    "88": 0.13281,
    "89": 0.14801,
    "90": 0.16559,
    "91": 0.18165,
    "92": 0.19907,
    "93": 0.21813,
    "94": 0.23904,
    "95": 0.25775,
    "96": 0.28216,
    "97": 0.30054,
    "98": 0.3212,
    "99": 0.33948
  },
  "2017": {
    "20": 0.00121,
    "21": 0.0013,
    "22": 0.00138,
    "23": 0.00146,
    "24": 0.00155,
    "25": 0.0016,
    "26": 0.00168,
    "27": 0.00171,
    "28": 0.00179,
    "29": 0.00181,
    "30": 0.00181,
    "31": 0.0019,
    "32": 0.00197,
    "33": 0.00205,
    "34": 0.0021,
    "35": 0.00213,
    "36": 0.00223,
    "37": 0.00223,
    "38": 0.00235,
    "39": 0.00243,
    "40": 0.00256,
    "41": 0.00262,
    "42": 0.00264,
    "43": 0.00286,
    "44": 0.00304,
    "45": 0.0034,
    "46": 0.0036,
    "47": 0.00382,
    "48": 0.00413,
    "49": 0.00447,
    "50": 0.00498,
    "51": 0.00556,
    "52": 0.00585,
    "53": 0.00655,
    "54": 0.00717,
    "55": 0.00788,
    "56": 0.00845,
    "57": 0.00901,
    "58": 0.00989,
    "59": 0.01073,
    "60": 0.01154,
    "61": 0.01235,
    "62": 0.01305,
    "63": 0.01432,
    "64": 0.01526,
    "65": 0.0162,
    "66": 0.0171,
    "67": 0.01844,
    "68": 0.0195,
    "69": 0.02112,
    "70": 0.0219,
    "71": 0.02564,
    "72": 0.02715,
    "73": 0.03016,
    "74": 0.0324,
    "75": 0.03575,
    "76": 0.03928,
    "77": 0.04357,
    "78": 0.04768,
    "79": 0.05271,
    "80": 0.05841,
    "81": 0.06415,
    "82": 0.07144,
    "83": 0.0799,
    "84": 0.08822,
    "85": 0.09725,
    "86": 0.10868,
    "87": 0.12045,
    "88": 0.13537,
    "89": 0.14992,
    "90": 0.16526,
    "91": 0.18216,
    "92": 0.20497,
    "93": 0.22089,
    "94": 0.24028,
    "95": 0.26441,
    "96": 0.28571,
    "97": 0.31038,
    "98": 0.32968,
    "99": 0.34625
  },
  "2018": {
    "20": 0.00109,
    "21": 0.00127,
    "22": 0.00133,
    "23": 0.00138,
    "24": 0.00146,
    "25": 0.0015,
    "26": 0.00156,
    "27": 0.00168,
    "28": 0.0017,
    "29": 0.00173,
    "30": 0.00184,
    "31": 0.00183,
    "32": 0.00189,
    "33": 0.00193,
    "34": 0.00202,
    "35": 0.00214,
    "36": 0.00215,
    "37": 0.00227,
    "38": 0.00233,
    "39": 0.0025,
    "40": 0.00251,
    "41": 0.00263,
    "42": 0.00271,
    "43": 0.00277,
    "44": 0.00311,
    "45": 0.00336,
    "46": 0.00363,
    "47": 0.00384,
    "48": 0.00404,
    "49": 0.00456,
    "50": 0.00487,
    "51": 0.00534,
    "52": 0.00591,
    "53": 0.00635,
    "54": 0.00706,
    "55": 0.00778,
    "56": 0.00849,
    "57": 0.00923,
    "58": 0.00972,
    "59": 0.01071,
    "60": 0.0114,
    "61": 0.01236,
    "62": 0.01342,
    "63": 0.01429,
    "64": 0.01526,
    "65": 0.01624,
    "66": 0.01732,
    "67": 0.01832,
    "68": 0.01948,
    "69": 0.02117,
    "70": 0.0226,
    "71": 0.02372,
    "72": 0.02761,
    "73": 0.02953,
    "74": 0.03265,
    "75": 0.03526,
    "76": 0.03917,
    "77": 0.04325,
    "78": 0.04682,
    "79": 0.05181,
    "80": 0.05704,
    "81": 0.06354,
    "82": 0.07028,
    "83": 0.07746,
    "84": 0.08749,
    "85": 0.09645,
    "86": 0.10712,
    "87": 0.11857,
    "88": 0.13355,
    "89": 0.14856,
    "90": 0.16467,
    "91": 0.18096,
    "92": 0.19944,
    "93": 0.22232,
    "94": 0.23947,
    "95": 0.26026,
    "96": 0.28698,
    "97": 0.30834,
    "98": 0.32813,
    "99": 0.33725
  }
};
const frequency = (chosenfrequency, a, range) => {
  var frequency = null;
  if (!chosenfrequency && range) {
    if (a === 0) {
      frequency = ["0"];
    } else if (a === 1) {
      frequency = ["1-49"];
    } else if (a === 2) {
      frequency = ["50-64"];
    } else if (a === 3) {
      frequency = ["65-74"];
    } else if (a === 4) {
      frequency = ["75-84"];
    } else if (a === 5) {
      frequency = ["85-94"];
    } else if (a === 6) {
      frequency = ["95-110"];
    }
  } else if (chosenfrequency || range) {
    //high
    if (a === 0) {
      frequency = ["75-79"];
    } else if (a === 1) {
      frequency = ["80-84"];
    } else if (a === 2) {
      frequency = ["85-89"];
    } else if (a === 3) {
      frequency = ["90-94"];
    } else if (a === 4) {
      frequency = ["95-99"];
    } else if (a === 5) {
      frequency = ["100-104"];
    } else if (a === 6) {
      frequency = ["105-109"];
    }
  } else {
    //cohort
    if (a === 0) {
      frequency = ["0"];
    } else if (a === 1) {
      frequency = [
        "1-4",
        "5-9",
        "10-14",
        "15-19",
        "20-24",
        "25-29",
        "30-34",
        "35-39",
        "40-44",
        "45-49"
      ];
    } else if (a === 2) {
      frequency = ["50-54", "55-59", "60-64"];
    } else if (a === 3) {
      frequency = ["65-69", "70-74"];
    } else if (a === 4) {
      frequency = ["75-79", "80-84"];
    } else if (a === 5) {
      frequency = ["85-89", "90-94"];
    } else if (a === 6) {
      frequency = ["95-99", "100-104", "105-109", "110"];
    }
  }
  return frequency;
};
class Mortal extends React.Component {
  constructor(props) {
    super(props);

    let dates = [];
    let noData = [];
    var averageLifetimeData = [];
    var averageLifetime = [];
    let mortalZeroNJData = [];
    var mortalZeroNJ = [];
    let mortalEightyFiveNJDataAge = [];
    let mortalEightyFiveNJAge = [];
    let mortalSixtyFiveNJDataAge = [];
    let mortalSixtyFiveNJAge = [];
    let mortalSeventyFiveNJDataAge = [];
    let mortalSeventyFiveNJAge = [];
    let mortalFiftyNJDataAge = [];
    let mortalFiftyNJAge = [];
    let mortalZeroNJDataAge = [];
    let mortalZeroNJAge = [];
    let mortalFiftyNJData = [];
    let mortalFiftyNJ = [];
    let mortalSeventyFiveNJData = [];
    let mortalSeventyFiveNJ = [];
    let mortalSixtyFiveNJData = [];
    let mortalSixtyFiveNJ = [];
    let mortalEightyFiveNJData = [];
    let mortalEightyFiveNJ = [];
    let mortalNinetyFiveNJData = [];
    let mortalNinetyFiveNJ = [];
    let mortalOneTenNJData = [];
    let mortalOneTenNJ = [];

    let yearlyZeroNJData = [];
    let yearlyZeroNJ = [];
    let yearlyFiftyNJData = [];
    let yearlyFiftyNJ = [];
    let yearlySeventyFiveNJData = [];
    let yearlySeventyFiveNJ = [];
    let yearlySixtyFiveNJData = [];
    let yearlySixtyFiveNJ = [];
    let yearlyEightyFiveNJData = [];
    let yearlyEightyFiveNJ = [];
    let yearlyNinetyFiveNJData = [];
    let yearlyNinetyFiveNJ = [];
    let yearlyOneTenNJData = [];
    let yearlyOneTenNJ = [];

    let mZeroNJData = [];
    let mEightyFiveNJDataAge = [];
    let mSixtyFiveNJDataAge = [];
    let mSeventyFiveNJDataAge = [];
    let mFiftyNJDataAge = [];

    let yZeroNJData = [];
    let yFiftyNJData = [];
    let ySixtyFiveNJData = [];
    let ySeventyFiveNJData = [];
    let yEightyFiveNJData = [];
    let yNinetyFiveNJData = [];
    let yOneTenNJData = [];

    let mZeroNJDataAge = [];
    let mFiftyNJData = [];
    let mSixtyFiveNJData = [];
    let mSeventyFiveNJData = [];
    let mEightyFiveNJData = [];
    let mNinetyFiveNJData = [];
    let mOneTenNJData = [];
    let avgLifetime = {};
    Object.keys(usmortality).forEach((yearSet, i) => {
      const year = yearSet; //Number(yearSet.split("-")[1]);

      const val = (d, p = 1000) => Math.round((d / 100000) * p * 1000);
      Object.values(usmortality)[i].forEach((x) => {
        if (!avgLifetime[x.age])
          avgLifetime[x.age] = { total: 0, length: 0, year };
        //console.log(x);
        const state = {
          year,
          length: avgLifetime[x.age].length + 1,
          total:
            (avgLifetime[x.age].total + val(x.dx, x.pop)) /
            avgLifetime[x.age].total
        };
        avgLifetime[x.age] = state;
      });
    });
    //console.log(avgLifetime);
    Object.keys(avgLifetime).forEach((y, i) => {
      const x = Object.values(avgLifetime)[i];
      averageLifetime.push(x.total / x.length);
      averageLifetimeData.push([x.year, x.total / x.length]);
    });
    Object.keys(usmortality).forEach((yearSet, i) => {
      const year = yearSet; //Number(yearSet.split("-")[1]);
      noData.push([year, 0]);
      dates.push(year);
      /*const thisdecade = popdata.find(
        (x) => x.year - year < 5 && x.year - year > -5
      );*/
      const val = (d, p = 1000) => Math.round((d / 100000) * p * 1000);
      Object.values(usmortality)[i].forEach((x) => {
        if (x.age === "0") {
          mZeroNJData.push([year, val(x.dx, x.pop)]);
          mZeroNJDataAge.push([year, x.pop * 1000]);
        } else if (
          x.age === "1-4" ||
          x.age === "5-9" ||
          x.age === "10-14" ||
          x.age === "15-19" ||
          x.age === "20-24" ||
          x.age === "25-29" ||
          x.age === "30-34" ||
          x.age === "35-39" ||
          x.age === "40-44" ||
          x.age === "45-49"
        ) {
          mFiftyNJData.push([year, val(x.dx, x.pop)]);
          mFiftyNJDataAge.push([year, x.pop * 1000]);
        } else if (
          x.age === "50-54" ||
          x.age === "55-59" ||
          x.age === "60-64"
        ) {
          mSixtyFiveNJData.push([year, val(x.dx, x.pop)]);
          mSixtyFiveNJDataAge.push([year, x.pop * 1000]);
        } else if (x.age === "65-69" || x.age === "70-74") {
          mSeventyFiveNJData.push([year, val(x.dx, x.pop)]);
          mSeventyFiveNJDataAge.push([year, x.pop * 1000]);
        } else if (x.age === "75-79" || x.age === "80-84") {
          mEightyFiveNJData.push([year, val(x.dx, x.pop)]);
          mEightyFiveNJDataAge.push([year, x.pop * 1000]);
        } else if (x.age === "85-89" || x.age === "90-94") {
          mNinetyFiveNJData.push([year, val(x.dx, x.pop)]);
        } else if (
          x.age === "95-99" ||
          x.age === "100-104" ||
          x.age === "105-109" ||
          x.age === "110"
        ) {
          mOneTenNJData.push([year, val(x.dx, x.pop)]);
        }
      });
    });

    Object.keys(yearly).forEach((year, i) => {
      var yearSet = null;
      Object.keys(usmortality).forEach((y, i) => {
        if (y - year > 0 && y - year < 5) {
          yearSet = Object.values(usmortality)[i];
        }
      });
      if (!yearSet) return console.log(yearSet);
      let obj = {};
      const ageDec = Object.values(yearly)[i];
      Object.keys(ageDec).forEach((age, i) => {
        const pop = yearSet.find(
          (y) => y.age.split("-")[1] - age > -1 && y.age.split("-")[1] - age < 5
        );
        const deathprob = Number(Object.values(ageDec)[i]);

        if (!obj[pop.age]) obj[pop.age] = 0;
        if (deathprob)
          obj[pop.age] =
            obj[pop.age] + Math.round(deathprob * (pop.pop / 5) * 1000);
      });
      Object.keys(obj).forEach((age, i) => {
        if (age === "0") {
          yZeroNJData.push([year, Object.values(obj)[i]]);
        } else if (
          age === "1-4" ||
          age === "5-9" ||
          age === "10-14" ||
          age === "15-19" ||
          age === "20-24" ||
          age === "25-29" ||
          age === "30-34" ||
          age === "35-39" ||
          age === "40-44" ||
          age === "45-49"
        ) {
          yFiftyNJData.push([year, Object.values(obj)[i]]);
        } else if (age === "50-54" || age === "55-59" || age === "60-64") {
          ySixtyFiveNJData.push([year, Object.values(obj)[i]]);
        } else if (age === "65-69" || age === "70-74") {
          ySeventyFiveNJData.push([year, Object.values(obj)[i]]);
        } else if (age === "75-79" || age === "80-84") {
          yEightyFiveNJData.push([year, Object.values(obj)[i]]);
        } else if (age === "85-89" || age === "90-94") {
          yNinetyFiveNJData.push([year, Object.values(obj)[i]]);
        } else if (
          age === "95-99" ||
          age === "100-104" ||
          age === "105-109" ||
          age === "110"
        ) {
          yOneTenNJData.push([year, Object.values(obj)[i]]);
        }
      });
      /**
    =[{
      age: "50-54",
      dx: 2357.65 ,
      pop: 20846
     },{}]
      */
    });
    dates.forEach((x) => {
      let yO = 0;
      yOneTenNJData.forEach((obj) => {
        if (obj[0] === x) yO = yO + obj[1];
      });
      yearlyOneTenNJ.push(yO);
      yearlyOneTenNJData.push([x, yO]);
      let yN = 0;
      yNinetyFiveNJData.forEach((obj) => {
        if (obj[0] === x) yN = yN + obj[1];
      });
      yearlyNinetyFiveNJ.push(yN);
      yearlyNinetyFiveNJData.push([x, yN]);
      let yA = 0;
      yEightyFiveNJData.forEach((obj) => {
        if (obj[0] === x) yA = yA + obj[1];
      });
      yearlyEightyFiveNJ.push(yA);
      yearlyEightyFiveNJData.push([x, yA]);
      let yE = 0;
      ySeventyFiveNJData.forEach((obj) => {
        if (obj[0] === x) yE = yE + obj[1];
      });
      yearlySeventyFiveNJ.push(yE);
      yearlySeventyFiveNJData.push([x, yE]);
      let yS = 0;
      ySixtyFiveNJData.forEach((obj) => {
        if (obj[0] === x) yS = yS + obj[1];
      });
      yearlySixtyFiveNJ.push(yS);
      yearlySixtyFiveNJData.push([x, yS]);
      let yM = 0;
      yFiftyNJData.forEach((obj) => {
        if (obj[0] === x) yM = yM + obj[1];
      });
      yearlyFiftyNJ.push(yM);
      yearlyFiftyNJData.push([x, yM]);
      let yZ = 0;
      yZeroNJData.forEach((obj) => {
        if (obj[0] === x) yZ = yZ + obj[1];
      });
      yearlyZeroNJ.push(yZ);
      yearlyZeroNJData.push([x, yZ]);

      let totmO = 0;
      mOneTenNJData.forEach((obj) => {
        if (obj[0] === x) totmO = totmO + obj[1];
      });
      mortalOneTenNJ.push(totmO);
      mortalOneTenNJData.push([x, totmO]);

      let totmN = 0;
      mNinetyFiveNJData.forEach((obj) => {
        if (obj[0] === x) totmN = totmN + obj[1];
      });
      mortalNinetyFiveNJ.push(totmN);
      mortalNinetyFiveNJData.push([x, totmN]);
      let totmE = 0;
      mEightyFiveNJData.forEach((obj) => {
        if (obj[0] === x) totmE = totmE + obj[1];
      });
      mortalEightyFiveNJ.push(totmE);
      mortalEightyFiveNJData.push([x, totmE]);
      let totmSe = 0;
      mSeventyFiveNJData.forEach((obj) => {
        if (obj[0] === x) totmSe = totmSe + obj[1];
      });
      mortalSeventyFiveNJ.push(totmSe);
      mortalSeventyFiveNJData.push([x, totmSe]);
      let totmS = 0;
      mSixtyFiveNJData.forEach((obj) => {
        if (obj[0] === x) totmS = totmS + obj[1];
      });
      mortalSixtyFiveNJ.push(totmS);
      mortalSixtyFiveNJData.push([x, totmS]);
      let totmF = 0;
      mFiftyNJData.forEach((obj) => {
        if (obj[0] === x) totmF = totmF + obj[1];
      });
      mortalFiftyNJ.push(totmF);
      mortalFiftyNJData.push([x, totmF]);
      let totmZ = 0;
      mZeroNJData.forEach((obj) => {
        if (obj[0] === x) totmZ = totmZ + obj[1];
      });
      mortalZeroNJ.push(totmZ);
      mortalZeroNJData.push([x, totmZ]);

      let totmEFA = 0;
      mEightyFiveNJDataAge.forEach((obj) => {
        if (obj[0] === x) totmEFA = totmEFA + obj[1];
      });
      mortalEightyFiveNJAge.push(totmEFA);
      mortalEightyFiveNJDataAge.push([x, totmEFA]);
      let totmSeA = 0;
      mSeventyFiveNJDataAge.forEach((obj) => {
        if (obj[0] === x) totmSeA = totmSeA + obj[1];
      });
      mortalSeventyFiveNJAge.push(totmSeA);
      mortalSeventyFiveNJDataAge.push([x, totmSeA]);
      let totmSA = 0;
      mSixtyFiveNJDataAge.forEach((obj) => {
        if (obj[0] === x) totmSA = totmSA + obj[1];
      });
      mortalSixtyFiveNJAge.push(totmSA);
      mortalSixtyFiveNJDataAge.push([x, totmSA]);
      let totmFA = 0;
      mFiftyNJDataAge.forEach((obj) => {
        if (obj[0] === x) totmFA = totmFA + obj[1];
      });
      mortalFiftyNJAge.push(totmFA);
      mortalFiftyNJDataAge.push([x, totmFA]);
      let totmZA = 0;
      mZeroNJDataAge.forEach((obj) => {
        if (obj[0] === x) totmZA = totmZA + obj[1];
      });
      mortalZeroNJAge.push(totmZA);
      mortalZeroNJDataAge.push([x, totmZA]);
    });
    var date = [...new Set(dates)];
    var lowDate = Math.min(...date);
    var highDate = Math.max(...date);
    var lowDeaths = 0; //Math.min(...mortalZeroNJ);
    const all = [
      ...mortalZeroNJ,
      ...mortalFiftyNJ,
      ...mortalSixtyFiveNJ,
      ...mortalSeventyFiveNJ,
      ...mortalEightyFiveNJ,
      ...mortalNinetyFiveNJ,
      ...mortalOneTenNJ
    ];
    var highlifetime = Math.max(...averageLifetime);
    var highDeaths = Math.max(...all);
    var cappop = Math.max(
      ...mortalZeroNJAge,
      ...mortalFiftyNJAge,
      ...mortalSixtyFiveNJAge,
      ...mortalSeventyFiveNJAge,
      ...mortalEightyFiveNJAge
    );
    noData.sort((a, b) => a[0] - b[0]);
    mortalZeroNJData.sort((a, b) => a[0] - b[0]);
    mortalZeroNJDataAge.sort((a, b) => a[0] - b[0]);
    mortalFiftyNJDataAge.sort((a, b) => a[0] - b[0]);
    mortalSixtyFiveNJDataAge.sort((a, b) => a[0] - b[0]);
    mortalSeventyFiveNJDataAge.sort((a, b) => a[0] - b[0]);
    mortalEightyFiveNJDataAge.sort((a, b) => a[0] - b[0]);
    mortalFiftyNJData.sort((a, b) => a[0] - b[0]);
    mortalSixtyFiveNJData.sort((a, b) => a[0] - b[0]);
    mortalSeventyFiveNJData.sort((a, b) => a[0] - b[0]);
    mortalEightyFiveNJData.sort((a, b) => a[0] - b[0]);
    mortalNinetyFiveNJData.sort((a, b) => a[0] - b[0]);
    mortalOneTenNJData.sort((a, b) => a[0] - b[0]);
    var state = {
      cappop,
      highlifetime,
      averageLifetimeData,
      date,
      mortalZeroNJDataAge,
      mortalFiftyNJDataAge,
      mortalSixtyFiveNJDataAge,
      mortalSeventyFiveNJDataAge,
      mortalEightyFiveNJDataAge,
      mortalZeroNJData,
      mortalFiftyNJData,
      mortalSixtyFiveNJData,
      mortalSeventyFiveNJData,
      mortalEightyFiveNJData,
      mortalNinetyFiveNJData,
      mortalOneTenNJData,
      yearlyZeroNJData,
      yearlyFiftyNJData,
      yearlySixtyFiveNJData,
      yearlySeventyFiveNJData,
      yearlyEightyFiveNJData,
      yearlyNinetyFiveNJData,
      yearlyOneTenNJData,
      noData,
      yAxis: highDeaths - lowDeaths,
      xAxis: highDate - lowDate,
      lowDate,
      highDate,
      lowDeaths,
      highDeaths,
      chosenRate: true
    };
    this.state = state;
  }
  componentDidUpdate = (prevProps) => {
    const { chosenRate, chosenfrequency } = this.state;
    if (
      chosenRate !== this.state.lastChosenRate ||
      this.state.lastchosenfrequency !== chosenfrequency
    )
      this.setState(
        {
          lastchosenfrequency: chosenfrequency,
          lastChosenRate: chosenRate
        },
        () => {
          let dates = [];
          let noData = [];
          let mortalZeroNJData = [];
          var mortalZeroNJ = [];
          let mortalZeroNJDataAge = [];
          let mortalZeroNJAge = [];
          let mortalFiftyNJDataAge = [];
          let mortalFiftyNJAge = [];
          let mortalSixtyFiveNJDataAge = [];
          let mortalSixtyFiveNJAge = [];
          let mortalSeventyFiveNJDataAge = [];
          let mortalSeventyFiveNJAge = [];
          let mortalEightyFiveNJDataAge = [];
          let mortalEightyFiveNJAge = [];
          let mortalFiftyNJData = [];
          let mortalFiftyNJ = [];
          let mortalSixtyFiveNJData = [];
          let mortalSixtyFiveNJ = [];
          let mortalSeventyFiveNJData = [];
          let mortalSeventyFiveNJ = [];
          let mortalEightyFiveNJData = [];
          let mortalEightyFiveNJ = [];
          let mortalNinetyFiveNJData = [];
          let mortalNinetyFiveNJ = [];
          let mortalOneTenNJData = [];
          let mortalOneTenNJ = [];

          let yearlyZeroNJData = [];
          let yearlyZeroNJ = [];
          let yearlyFiftyNJData = [];
          let yearlyFiftyNJ = [];
          let yearlySeventyFiveNJData = [];
          let yearlySeventyFiveNJ = [];
          let yearlySixtyFiveNJData = [];
          let yearlySixtyFiveNJ = [];
          let yearlyEightyFiveNJData = [];
          let yearlyEightyFiveNJ = [];
          let yearlyNinetyFiveNJData = [];
          let yearlyNinetyFiveNJ = [];
          let yearlyOneTenNJData = [];
          let yearlyOneTenNJ = [];

          let mZeroNJData = [];
          let mZeroNJDataAge = [];
          let mFiftyNJDataAge = [];
          let mSixtyFiveNJDataAge = [];
          let mSeventyFiveNJDataAge = [];
          let mEightyFiveNJDataAge = [];
          let mFiftyNJData = [];
          let mSixtyFiveNJData = [];
          let mSeventyFiveNJData = [];
          let mEightyFiveNJData = [];
          let mNinetyFiveNJData = [];
          let mOneTenNJData = [];

          let yZeroNJData = [];
          let yFiftyNJData = [];
          let ySixtyFiveNJData = [];
          let ySeventyFiveNJData = [];
          let yEightyFiveNJData = [];
          let yNinetyFiveNJData = [];
          let yOneTenNJData = [];
          Object.keys(usmortality).forEach((yearSet, i) => {
            const year = yearSet; //Number(yearSet.split("-")[1]);
            noData.push([year, 0]);
            dates.push(year);
            /*const thisdecade = popdata.find(
          (x) => x.year - year < 5 && x.year - year > -5
        );*/
            const val = (d, p = 1000) => Math.round((d / 100000) * p * 1000);
            Object.values(usmortality)[i].forEach((x) => {
              if (frequency(chosenfrequency, 0).includes(x.age)) {
                mZeroNJDataAge.push([
                  year,
                  chosenRate ? x.pop * 1000 : x.pop * 1000
                ]);
              } else if (frequency(chosenfrequency, 1).includes(x.age)) {
                mFiftyNJDataAge.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 10 : x.pop * 1000
                ]);
              } else if (frequency(chosenfrequency, 2).includes(x.age)) {
                mSixtyFiveNJDataAge.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 3 : x.pop * 1000
                ]);
              } else if (frequency(chosenfrequency, 3).includes(x.age)) {
                mSeventyFiveNJDataAge.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 2 : x.pop * 1000
                ]);
              } else if (frequency(chosenfrequency, 4).includes(x.age)) {
                mEightyFiveNJDataAge.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 2 : x.pop * 1000
                ]);
              }
              if (frequency(chosenfrequency, 0).includes(x.age)) {
                mZeroNJData.push([
                  year,
                  chosenRate ? x.pop * 1000 : val(x.dx, x.pop)
                ]);
              } else if (frequency(chosenfrequency, 1).includes(x.age)) {
                mFiftyNJData.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 10 : val(x.dx, x.pop)
                ]);
              } else if (frequency(chosenfrequency, 2).includes(x.age)) {
                mSixtyFiveNJData.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 3 : val(x.dx, x.pop)
                ]);
              } else if (frequency(chosenfrequency, 3).includes(x.age)) {
                mSeventyFiveNJData.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 2 : val(x.dx, x.pop)
                ]);
              } else if (frequency(chosenfrequency, 4).includes(x.age)) {
                mEightyFiveNJData.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 2 : val(x.dx, x.pop)
                ]);
              } else if (frequency(chosenfrequency, 5).includes(x.age)) {
                mNinetyFiveNJData.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 2 : val(x.dx, x.pop)
                ]);
              } else if (frequency(chosenfrequency, 6).includes(x.age)) {
                mOneTenNJData.push([
                  year,
                  chosenRate ? (x.pop * 1000) / 4 : val(x.dx, x.pop)
                ]);
              }
            });
          });
          Object.keys(yearly).forEach((year, i) => {
            noData.push([year, 0]);
            dates.push(year);
            var yearSet = null;
            Object.keys(usmortality).forEach((y, i) => {
              if (y - year > 0 && y - year < 5) {
                yearSet = Object.values(usmortality)[i];
              }
            });
            if (!yearSet) return console.log(yearSet);
            let obj = {};
            const ageDec = Object.values(yearly)[i];
            Object.keys(ageDec).forEach((age, i) => {
              const pop = yearSet.find(
                (y) =>
                  y.age.split("-")[1] - age > -1 &&
                  y.age.split("-")[1] - age < 5
              );
              const deathprob = Number(Object.values(ageDec)[i]);

              if (!obj[pop.age]) obj[pop.age] = 0;
              if (deathprob)
                obj[pop.age] =
                  obj[pop.age] + Math.round(deathprob * (pop.pop / 5) * 1000);
            });
            Object.keys(obj).forEach((age, i) => {
              if (age === "0") {
                yZeroNJData.push([year, Object.values(obj)[i]]);
              } else if (
                age === "1-4" ||
                age === "5-9" ||
                age === "10-14" ||
                age === "15-19" ||
                age === "20-24" ||
                age === "25-29" ||
                age === "30-34" ||
                age === "35-39" ||
                age === "40-44" ||
                age === "45-49"
              ) {
                yFiftyNJData.push([year, Object.values(obj)[i]]);
              } else if (
                age === "50-54" ||
                age === "55-59" ||
                age === "60-64"
              ) {
                ySixtyFiveNJData.push([year, Object.values(obj)[i]]);
              } else if (age === "65-69" || age === "70-74") {
                ySeventyFiveNJData.push([year, Object.values(obj)[i]]);
              } else if (age === "75-79" || age === "80-84") {
                yEightyFiveNJData.push([year, Object.values(obj)[i]]);
              } else if (age === "85-89" || age === "90-94") {
                yNinetyFiveNJData.push([year, Object.values(obj)[i]]);
              } else if (
                age === "95-99" ||
                age === "100-104" ||
                age === "105-109" ||
                age === "110"
              ) {
                yOneTenNJData.push([year, Object.values(obj)[i]]);
              }
            });
            /**
          =[{
            age: "50-54",
            dx: 2357.65 ,
            pop: 20846
           },{}]
            */
          });
          console.log(ySeventyFiveNJData);
          dates.forEach((x) => {
            let yO = 0;
            yOneTenNJData.forEach((obj) => {
              if (obj[0] === x) yO = yO + obj[1];
            });
            yearlyOneTenNJ.push(yO);
            yearlyOneTenNJData.push([x, yO]);
            let yN = 0;
            yNinetyFiveNJData.forEach((obj) => {
              if (obj[0] === x) yN = yN + obj[1];
            });
            yearlyNinetyFiveNJ.push(yN);
            yearlyNinetyFiveNJData.push([x, yN]);
            let yA = 0;
            yEightyFiveNJData.forEach((obj) => {
              if (obj[0] === x) yA = yA + obj[1];
            });
            yearlyEightyFiveNJ.push(yA);
            yearlyEightyFiveNJData.push([x, yA]);
            let yE = 0;
            ySeventyFiveNJData.forEach((obj) => {
              if (obj[0] === x) yE = yE + obj[1];
            });
            yearlySeventyFiveNJ.push(yE);
            yearlySeventyFiveNJData.push([x, yE]);
            let yS = 0;
            ySixtyFiveNJData.forEach((obj) => {
              if (obj[0] === x) yS = yS + obj[1];
            });
            yearlySixtyFiveNJ.push(yS);
            yearlySixtyFiveNJData.push([x, yS]);
            let yM = 0;
            yFiftyNJData.forEach((obj) => {
              if (obj[0] === x) yM = yM + obj[1];
            });
            yearlyFiftyNJ.push(yM);
            yearlyFiftyNJData.push([x, yM]);
            let yZ = 0;
            yZeroNJData.forEach((obj) => {
              if (obj[0] === x) yZ = yZ + obj[1];
            });
            yearlyZeroNJ.push(yZ);
            yearlyZeroNJData.push([x, yZ]);

            let totmO = 0;
            mOneTenNJData.forEach((obj) => {
              if (obj[0] === x) totmO = totmO + obj[1];
            });
            mortalOneTenNJ.push(totmO);
            mortalOneTenNJData.push([x, totmO]);

            let totmN = 0;
            mNinetyFiveNJData.forEach((obj) => {
              if (obj[0] === x) totmN = totmN + obj[1];
            });
            mortalNinetyFiveNJ.push(totmN);
            mortalNinetyFiveNJData.push([x, totmN]);
            let totmE = 0;
            mEightyFiveNJData.forEach((obj) => {
              if (obj[0] === x) totmE = totmE + obj[1];
            });
            mortalEightyFiveNJ.push(totmE);
            mortalEightyFiveNJData.push([x, totmE]);
            let totmSe = 0;
            mSeventyFiveNJData.forEach((obj) => {
              if (obj[0] === x) totmSe = totmSe + obj[1];
            });
            mortalSeventyFiveNJ.push(totmSe);
            mortalSeventyFiveNJData.push([x, totmSe]);
            let totmS = 0;
            mSixtyFiveNJData.forEach((obj) => {
              if (obj[0] === x) totmS = totmS + obj[1];
            });
            mortalSixtyFiveNJ.push(totmS);
            mortalSixtyFiveNJData.push([x, totmS]);
            let totmF = 0;
            mFiftyNJData.forEach((obj) => {
              if (obj[0] === x) totmF = totmF + obj[1];
            });
            mortalFiftyNJ.push(totmF);
            mortalFiftyNJData.push([x, totmF]);
            let totmZ = 0;
            mZeroNJData.forEach((obj) => {
              if (obj[0] === x) totmZ = totmZ + obj[1];
            });
            mortalZeroNJ.push(totmZ);
            mortalZeroNJData.push([x, totmZ]);

            let totmEFA = 0;
            mEightyFiveNJDataAge.forEach((obj) => {
              if (obj[0] === x) totmEFA = totmEFA + obj[1];
            });
            mortalEightyFiveNJAge.push(totmEFA);
            mortalEightyFiveNJDataAge.push([x, totmEFA]);
            let totmSeA = 0;
            mSeventyFiveNJDataAge.forEach((obj) => {
              if (obj[0] === x) totmSeA = totmSeA + obj[1];
            });
            mortalSeventyFiveNJAge.push(totmSeA);
            mortalSeventyFiveNJDataAge.push([x, totmSeA]);
            let totmSA = 0;
            mSixtyFiveNJDataAge.forEach((obj) => {
              if (obj[0] === x) totmSA = totmSA + obj[1];
            });
            mortalSixtyFiveNJAge.push(totmSA);
            mortalSixtyFiveNJDataAge.push([x, totmSA]);
            let totmFA = 0;
            mFiftyNJDataAge.forEach((obj) => {
              if (obj[0] === x) totmFA = totmFA + obj[1];
            });
            mortalFiftyNJAge.push(totmFA);
            mortalFiftyNJDataAge.push([x, totmFA]);
            let totmZA = 0;
            mZeroNJDataAge.forEach((obj) => {
              if (obj[0] === x) totmZA = totmZA + obj[1];
            });
            mortalZeroNJAge.push(totmZA);
            mortalZeroNJDataAge.push([x, totmZA]);
          });
          console.log(yearlySixtyFiveNJData);
          var date = [...new Set(dates)];
          var lowDate = Math.min(...date);
          var highDate = Math.max(...date);
          var lowDeaths = 0; //Math.min(...mortalZeroNJ);
          const all = [
            ...mortalZeroNJ,
            ...mortalFiftyNJ,
            ...mortalSixtyFiveNJ,
            ...mortalSeventyFiveNJ,
            ...mortalEightyFiveNJ,
            ...mortalNinetyFiveNJ,
            ...mortalOneTenNJ
          ];
          var highDeaths = Math.max(...all);
          var cappop = Math.max(
            ...mortalZeroNJAge,
            ...mortalFiftyNJAge,
            ...mortalSixtyFiveNJAge,
            ...mortalSeventyFiveNJAge,
            ...mortalEightyFiveNJAge
          );
          noData.sort((a, b) => a[0] - b[0]);
          mortalZeroNJData.sort((a, b) => a[0] - b[0]);
          mortalFiftyNJDataAge.sort((a, b) => a[0] - b[0]);
          mortalSixtyFiveNJDataAge.sort((a, b) => a[0] - b[0]);
          mortalSeventyFiveNJDataAge.sort((a, b) => a[0] - b[0]);
          mortalEightyFiveNJDataAge.sort((a, b) => a[0] - b[0]);
          mortalFiftyNJData.sort((a, b) => a[0] - b[0]);
          mortalSixtyFiveNJData.sort((a, b) => a[0] - b[0]);
          mortalSeventyFiveNJData.sort((a, b) => a[0] - b[0]);
          mortalEightyFiveNJData.sort((a, b) => a[0] - b[0]);
          mortalNinetyFiveNJData.sort((a, b) => a[0] - b[0]);
          mortalOneTenNJData.sort((a, b) => a[0] - b[0]);
          this.setState({
            date,
            cappop,
            mortalZeroNJData,
            mortalFiftyNJDataAge,
            mortalSixtyFiveNJDataAge,
            mortalSeventyFiveNJDataAge,
            mortalEightyFiveNJDataAge,
            mortalFiftyNJData,
            mortalSixtyFiveNJData,
            mortalSeventyFiveNJData,
            mortalEightyFiveNJData,
            mortalNinetyFiveNJData,
            mortalOneTenNJData,
            yearlyZeroNJData,
            yearlyFiftyNJData,
            yearlySixtyFiveNJData,
            yearlySeventyFiveNJData,
            yearlyEightyFiveNJData,
            yearlyNinetyFiveNJData,
            yearlyOneTenNJData,
            noData,
            yAxis: highDeaths - lowDeaths,
            xAxis: highDate - lowDate,
            lowDate,
            highDate,
            lowDeaths,
            highDeaths
          });
        }
      );
  };
  render() {
    const yaxis = this.state.yaxis ? this.state.yAxis : this.state.cappop;
    const { chosenRate, lowDate } = this.state;
    const noData = this.state.noData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      0
    ]);
    const mortalZeroNJDataAge = this.state.mortalZeroNJDataAge.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - this.state.lowDeaths) / yaxis) * 150
    ]);
    const mortalFiftyNJDataAge = this.state.mortalFiftyNJDataAge.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalSixtyFiveNJDataAge = this.state.mortalSixtyFiveNJDataAge.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalSeventyFiveNJDataAge = this.state.mortalSeventyFiveNJDataAge.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalEightyFiveNJDataAge = this.state.mortalEightyFiveNJDataAge.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalZeroNJData = this.state.mortalZeroNJData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - this.state.lowDeaths) / yaxis) * 150
    ]);
    const mortalFiftyNJData = this.state.mortalFiftyNJData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - this.state.lowDeaths) / yaxis) * 150
    ]);
    const mortalSixtyFiveNJData = this.state.mortalSixtyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalSeventyFiveNJData = this.state.mortalSeventyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalEightyFiveNJData = this.state.mortalEightyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalNinetyFiveNJData = this.state.mortalNinetyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const mortalOneTenNJData = this.state.mortalOneTenNJData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - this.state.lowDeaths) / yaxis) * 150
    ]);
    const averageLifetimeData = this.state.averageLifetimeData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - 0) / this.state.highlifetime) * 150
    ]);

    const yearlyZeroNJData = this.state.yearlyZeroNJData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - this.state.lowDeaths) / yaxis) * 150
    ]);
    const yearlyFiftyNJData = this.state.yearlyFiftyNJData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - this.state.lowDeaths) / yaxis) * 150
    ]);
    const yearlySixtyFiveNJData = this.state.yearlySixtyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const yearlySeventyFiveNJData = this.state.yearlySeventyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const yearlyEightyFiveNJData = this.state.yearlyEightyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const yearlyNinetyFiveNJData = this.state.yearlyNinetyFiveNJData.map(
      ([x, y]) => [
        ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
        ((y - this.state.lowDeaths) / yaxis) * 150
      ]
    );
    const yearlyOneTenNJData = this.state.yearlyOneTenNJData.map(([x, y]) => [
      ((x - lowDate) / this.state.xAxis) * this.props.lastWidth * 0.9,
      ((y - this.state.lowDeaths) / yaxis) * 150
    ]);
    const ite = { border: "1px grey dashed", width: "max-content" };
    const labelstyle = {
      backgroundColor: "rgba(50,120,200,.6)",
      top: "0px",
      height: "min-content",
      display: "flex",
      maxWidth: "100%",
      left: "2px",
      flexWrap: "wrap"
    };
    const buttonStyle = {
      userSelect: "none",
      border: "1px solid black",
      color: "black",
      backgroundColor: "rgb(220,220,220)",
      borderRadius: "4px",
      padding: "5px",
      margin: "2px"
    };
    return (
      <div style={this.props.style}>
        {/*<div
          style={{
            position: "relative",
            top: "0px",
            height: "min-content",
            flexWrap: "wrap",
            display: "flex"
          }}
        >
          {["New Jersey"].map((x, i) => {
            return (
              <div
                key={i}
                onMouseEnter={() =>
                  this.setState({}, () => {
                    clearTimeout(this.unHover);
                    this.unHover = setTimeout(
                      () => this.setState({ hoveredBtn: x }),
                      200
                    );
                  })
                }
                style={{
                  transition: ".3s ease-in",
                  boxShadow: `inset 0px 0px ${
                    this.state.hoveredBtn === x ? 7 : 0
                  }px  ${this.state.hoveredBtn === x ? 2 : 0.5}px black`,
                  alignItems: "center",
                  padding: "4px 7px",
                  border: this.state.chosenState === x ? "1px solid black" : {1},
                  display: "flex"
                }}
              >
                <div onClick={() => this.setState({ chosenState: x })}>{x}</div>
                &nbsp;
                {this.state.chosenState === x && (
                  <button onClick={() => this.setState({ chosenState: null })}>
                    &times;
                  </button>
                )}
              </div>
            );
          })}
        </div>*/}
        <div style={{ width: "100%", minHeight: "230px" }}>
          <div style={labelstyle}>
            <div
              style={buttonStyle}
              onClick={() =>
                this.setState(
                  this.state.chosenRate && this.state.chosenfrequency
                    ? { chosenRate: false, chosenfrequency: false }
                    : !this.state.chosenfrequency
                    ? { chosenfrequency: true }
                    : { chosenRate: true }
                )
              }
            >
              {chosenRate
                ? "population per 5yr "
                : `highest accu yearly mortality `}
            </div>
            <button
              style={buttonStyle}
              onClick={() => {
                this.setState({
                  yaxis: !this.state.yaxis
                });
              }}
            >
              {!this.state.yaxis
                ? "pop"
                : this.state.chosenfrequency && !chosenRate
                ? "high"
                : "cohort"}
            </button>
            <div>
              -&nbsp;
              <br />
              {shortNumber(Math.round(this.state.highDeaths /*/5 */))}
            </div>
            <div
              style={{
                top: "0px",
                height: "min-content",
                display: "flex",
                position: "relative",
                right: "0px"
              }}
            >
              {lowDate}&nbsp;
              {this.state.highDate}
            </div>
            <br />
            {/* <div
              style={{
                textAlign: "right",
                top: "0px",
                height: "min-content",
                display: "flex",
                position: "relative",
                right: "0px"
              }}
            >
              {this.state.highlifetime} average
            </div>
            {/*<div
              style={{
                top: "200px",
                height: "min-content",
                display: "flex",
                position: "absolute",
                right: "0px",
                flexDirection: "column"
              }}
            >
              {this.state.lowDeaths}
            </div>*/}
          </div>
          <div style={{ transform: "translate(0px,200px)" }}>
            <svg
              className="all"
              style={linecss}
              xmlns="http://www.w3.org/2000/svg"
            >
              {noData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="rgb(230,230,230)"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {/*yearlyZeroNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="white"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {yearlyFiftyNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="purple"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {yearlySixtyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="blue"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {yearlySeventyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="green"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {yearlyEightyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="orange"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {yearlyNinetyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="red"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {yearlyOneTenNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="black"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
                  )*/}
              {/** */}
              {mortalZeroNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="white"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {mortalFiftyNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="purple"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {mortalSixtyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="blue"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {mortalSeventyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="green"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {mortalEightyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="orange"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {mortalNinetyFiveNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="red"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {mortalOneTenNJData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="black"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
              {/*<BasisCurve
              showPoints={false}
              strokeWidth={4}
              stroke="purple"
              data={mortalZeroNJData}
            />*/}
              {mortalZeroNJDataAge.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={8}
                      height={1}
                      stroke="white"
                      fill="transparent"
                      strokeWidth={1}
                      key={i}
                    />
                  )
              )}
              {mortalFiftyNJDataAge.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={8}
                      height={1}
                      stroke="purple"
                      fill="transparent"
                      strokeWidth={1}
                      key={i}
                    />
                  )
              )}
              {mortalSixtyFiveNJDataAge.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={8}
                      height={1}
                      stroke="blue"
                      fill="transparent"
                      strokeWidth={1}
                      key={i}
                    />
                  )
              )}
              {mortalSeventyFiveNJDataAge.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={8}
                      height={1}
                      stroke="green"
                      fill="transparent"
                      strokeWidth={1}
                      key={i}
                    />
                  )
              )}
              {mortalEightyFiveNJDataAge.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={8}
                      height={1}
                      stroke="orange"
                      fill="transparent"
                      strokeWidth={1}
                      key={i}
                    />
                  )
              )}
              {averageLifetimeData.map(
                ([x, y], i) =>
                  !isNaN(x) &&
                  !isNaN(y) && (
                    <rect
                      x={x}
                      y={y}
                      width={2}
                      height={2}
                      stroke="black"
                      fill="transparent"
                      strokeWidth={3}
                      key={i}
                    />
                  )
              )}
            </svg>
          </div>
          <div style={labelstyle}>
            <div
              style={{
                display: "flex",
                position: "absolute",
                width: "max-content"
              }}
            >
              <div style={{ width: "max-content" }}>
                <div
                  style={{
                    width: "5px",
                    height: "5px",
                    backgroundColor: "white"
                  }}
                />
                {frequency(this.state.chosenfrequency, 0, true)}&nbsp;&nbsp;
              </div>
              <div style={{ width: "max-content" }}>
                <div
                  style={{
                    width: "5px",
                    height: "5px",
                    backgroundColor: "purple"
                  }}
                />
                {frequency(this.state.chosenfrequency, 1, true)}&nbsp;&nbsp;
              </div>
              <div style={{ width: "max-content" }}>
                <div
                  style={{
                    width: "5px",
                    height: "5px",
                    backgroundColor: "blue"
                  }}
                />
                {frequency(this.state.chosenfrequency, 2, true)}&nbsp;&nbsp;
              </div>
              <div style={{ width: "max-content" }}>
                <div
                  style={{
                    width: "5px",
                    height: "5px",
                    backgroundColor: "green"
                  }}
                />
                {frequency(this.state.chosenfrequency, 3, true)}&nbsp;&nbsp;
              </div>
              <div style={{ width: "max-content" }}>
                <div
                  style={{
                    width: "5px",
                    height: "5px",
                    backgroundColor: "orange"
                  }}
                />
                {frequency(this.state.chosenfrequency, 4, true)}&nbsp;&nbsp;
              </div>
              <div style={{ width: "max-content" }}>
                <div
                  style={{
                    width: "5px",
                    height: "5px",
                    backgroundColor: "red"
                  }}
                />
                {frequency(this.state.chosenfrequency, 5, true)}&nbsp;&nbsp;
              </div>
              <div style={{ width: "max-content" }}>
                <div
                  style={{
                    width: "5px",
                    height: "5px",
                    backgroundColor: "black"
                  }}
                />
                {
                  frequency(this.state.chosenfrequency, 6, true) //chosenfrequency, index, range defaults cohort
                }
                &nbsp;&nbsp;
              </div>
            </div>
          </div>
        </div>
        <div
          style={{
            display: "flex",
            width: "100%"
          }}
        >
          {this.state.date.map(
            (x) =>
              ["0", "5"].includes(x[3]) && (
                <div
                  key={x}
                  style={{
                    width: "max-content",
                    wordBreak: "none",
                    margin: "0px 10px"
                  }}
                >
                  {x}
                </div>
              )
          )}
        </div>
      </div>
    );
  }
}

export default Mortal;
